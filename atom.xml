<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"> <title>watermint.org</title> <link href="https://watermint.org/atom.xml" rel="self"/> <link href="https://watermint.org/"/> <updated>2023-09-25T07:34:08+09:00</updated> <id>https://watermint.org</id> <author> <name>Takayuki Okazaki</name> <uri>https://github.com/watermint</uri> </author> <rights>(c) 2005-2023 Takayuki Okazaki</rights> <entry> <title>Command line tool for batch output of Figma projects, frames and nodes</title> <link href="https://watermint.org/2023/09/25/figma-export-cli-en/"/> <updated>2023-09-25T00:00:00+09:00</updated> <id>https://watermint.org/2023/09/25/figma-export-cli-en</id> <content type="html">&lt;p&gt;Sometimes you want to export a batch of files created in Figma as a PDF, png or other format. For example, you may want to search for a memo you wrote on a sticky somewhere among several FigJams. This kind of search does not work because FigJam’s search does not look at the contents of the file, although it can search for file names and people.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2023-09-24-figma-export.jpg&quot; alt=&quot;tbx services figma file export all page&quot; /&gt;&lt;/p&gt; &lt;p&gt;At least you can know which file you wrote it in, so if you export all your project files as PDFs, you can manage the rest. Using the OS’s full-text search of files or cloud storage searches such as Dropbox is a solution. Automation is essential to establish this kind of workflow, as Figma fortunately uses an API to handle these export processes, I have integrated the functionality into my own open source tool &lt;a href=&quot;https://toolbox.watermint.org/ja&quot;&gt;watermint toolbox&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This tool is a command-line tool, so it may seem difficult for those unfamiliar with it, but once you automate it, you can’t go back, so it’s not too much of a loss to learn it.&lt;/p&gt; &lt;h1 id=&quot;commands-for-figma&quot;&gt;Commands for Figma&lt;/h1&gt; &lt;p&gt;The watermint toolbox provides commands for several supported services, such as Dropbox and Github, to perform the process. Commands for Figma include.&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Command&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-account-info.html&quot;&gt;services figma account info&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Retrieve current user information&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-file-export-all-page.html&quot;&gt;services figma file export all page&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Export all files/pages under the team&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-file-export-frame.html&quot;&gt;services figma file export frame&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Export all frames of the Figma file&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-file-export-node.html&quot;&gt;services figma file export node&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Export Figma document Node&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-file-export-page.html&quot;&gt;services figma file export page&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Export all pages of the Figma file&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-file-info.html&quot;&gt;services figma file info&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Show information of the figma file&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-file-list.html&quot;&gt;services figma file list&lt;/a&gt;&lt;/td&gt; &lt;td&gt;List files in the Figma Project&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;/commands/services-figma-project-list.html&quot;&gt;services figma project list&lt;/a&gt;&lt;/td&gt; &lt;td&gt;List projects of the team&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt; &lt;p&gt;Figma has the following structure from an API perspective.&lt;/p&gt; &lt;p&gt;Team -&amp;gt; Project -&amp;gt; File -&amp;gt; Page -&amp;gt; Frame -&amp;gt; Node&lt;/p&gt; &lt;p&gt;Each is managed by an ID number, and to export a file or page, you first need to know the starting team ID. The team ID can be found in the URL of the link to the team, which is the number following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;team/&lt;/code&gt; in the address when you select a team in Figma and copy the link.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2023-09-24-figma-team-id.png&quot; alt=&quot;team_id&quot; /&gt;&lt;/p&gt; &lt;p&gt;Download the &lt;a href=&quot;https://github.com/watermint/toolbox/releases/latest&quot;&gt;latest version of the watermint toolbox&lt;/a&gt;. Extract the downloaded zip file and you will find an executable file called tbx or tbx.exe, which should be placed in an easily accessible location, such as a desktop folder.&lt;/p&gt; &lt;p&gt;Open PowerShell for Windows or Terminal.app for macOS. Once opened, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd Desktop&lt;/code&gt; to the desktop (or the folder with the tbx executable) and execute the command as follows.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./tbx services figma project list -team-id xxxxxxxxxxxxxxxxxxxxx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(replace xxxxxxxxxxxxxxxxxxxxxxxxxxxx with the team ID you have just obtained from the team address).&lt;/p&gt; &lt;p&gt;The first time you run the application, you will be asked to authorise it as follows, so press Enter to launch the browser.&lt;/p&gt; &lt;p&gt;If you are happy, authorise the application. Then, when “Success” is displayed on the screen, authentication is complete.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done Opening the authorization URL: https://www.figma.com/oauth?client_id=XXXXXXXXXXXXXXX&amp;amp;redirect_uri=http%3A%2F%2Flocalhost%3A7800%2Fconnect%2Fauth&amp;amp;response_type=code&amp;amp;scope=file_read&amp;amp;state=XXXXXXXX Please press ENTER to open the auth page on the browser. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;When execution is completed, a list of projects and their IDs will be displayed as follows. If there are a large number of projects, some will be omitted, so please refer to the CSV or xlsx file in the path displayed at the end of the run.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./tbx services figma project list -team-id xxxxxxxxxxxxxxxxxxxxx watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done | id | name | |----------|---------------| | xxxxxxxx | Design System | | xxxxxxxx | Workspace | | xxxxxxxx | toolbox | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Similarly, if you want to get a list of the project’s files, run the following command.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./tbx services figma file list -project-id xxxxxxxx watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done | key | name | thumbnailUrl | lastModified | |------------------------|--------------|--------------|--------------| | xxxxxxxxxxxxxxxxxxxxxx | essentials | | | | xxxxxxxxxxxxxxxxxxxxxx | web | | | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you have the required file, get the key of this file and run the following command. This will export the file as a PDF in the folder where you run it. You can also choose to output png, svg or jpg with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-format&lt;/code&gt; option.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services figma file export page -key xxxxxxxxxxxxxxxxxxxxxx -path ./ watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done 1 page(s) found in the Figma file page 00:02 [==========================================================================] 1/ 1 DONE The command finished: 7.302s &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This command is per file, but there are also commands to output nodes and to export all files under the team, so you can use them as needed.&lt;/p&gt; </content> </entry> <entry> <title>Figmaのプロジェクトやフレーム、ノードを一括出力するコマンドライン ツール</title> <link href="https://watermint.org/2023/09/24/figma-export-cli/"/> <updated>2023-09-24T00:00:00+09:00</updated> <id>https://watermint.org/2023/09/24/figma-export-cli</id> <content type="html">&lt;p&gt;Figmaで作成したファイルをPDFやpngなどの形式として一括してエクスポートしておきたいことがあります。 たとえば、複数あるFigJamの中でどこかのスティッキーに書いたメモを検索したいとします。 Figmaの検索はファイル名や人の検索はできますが、ファイルの中身までは見てくれないためこういった検索がうまくいきません。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2023-09-24-figma-export.jpg&quot; alt=&quot;tbx services figma file export all page&quot; /&gt;&lt;/p&gt; &lt;p&gt;せめてどのファイルに書いたのかわかればよいので、プロジェクトファイルをPDFとしてすべてエクスポートしておけば後はなんとでもなります。 OSのファイル全文検索やDropboxなどのクラウドストレージの検索を使えば解決です。 こういったワークフローを確立するには、自動化が欠かせません。Figmaでは幸いAPIを利用してこれらエクスポート処理ができるようなので、 自作オープンソース ツールである &lt;a href=&quot;https://toolbox.watermint.org/ja&quot;&gt;watermint toolbox&lt;/a&gt;に機能を組み込んでみました。&lt;/p&gt; &lt;p&gt;このツールはコマンドライン ツールですのでなじみのない方には難しく感じるかもしれませんが、一度自動化してしまうと戻れなくなりますので、習得しておいてもさほど損ではないかと思います。&lt;/p&gt; &lt;h1 id=&quot;figma用のコマンド&quot;&gt;Figma用のコマンド&lt;/h1&gt; &lt;p&gt;watermint toolboxはDropboxやGithubなどいくつかの対応サービスに対して、コマンドを指定して処理を実行するようになっています。 Figma向けのコマンドは次のようなものがあります。&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;コマンド&lt;/th&gt; &lt;th&gt;説明&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-account-info.html&quot;&gt;services figma account info&lt;/a&gt;&lt;/td&gt; &lt;td&gt;現在のユーザー情報を取得する&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-file-export-all-page.html&quot;&gt;services figma file export all page&lt;/a&gt;&lt;/td&gt; &lt;td&gt;チーム配下のすべてのファイル/ページをエクスポートする&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-file-export-frame.html&quot;&gt;services figma file export frame&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Figmaファイルの全フレームを書き出す&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-file-export-node.html&quot;&gt;services figma file export node&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Figmaドキュメント・ノードの書き出し&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-file-export-page.html&quot;&gt;services figma file export page&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Figmaファイルの全ページを書き出す&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-file-info.html&quot;&gt;services figma file info&lt;/a&gt;&lt;/td&gt; &lt;td&gt;figmaファイルの情報を表示する&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-file-list.html&quot;&gt;services figma file list&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Figmaプロジェクト内のファイル一覧&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/services-figma-project-list.html&quot;&gt;services figma project list&lt;/a&gt;&lt;/td&gt; &lt;td&gt;チームのプロジェクト一覧&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h1 id=&quot;使い方&quot;&gt;使い方&lt;/h1&gt; &lt;p&gt;FigmaはAPI視点で見ると次のような構造になっています。&lt;/p&gt; &lt;p&gt;チーム -&amp;gt; プロジェクト -&amp;gt; ファイル -&amp;gt; ページ -&amp;gt; フレーム -&amp;gt; ノード&lt;/p&gt; &lt;p&gt;それぞれID番号で管理されており、ファイルやページをエクスポートするにはまず起点となるチームIDを知る必要があります。 チームIDは、チームへのリンクURLから知ることができます。Figmaのチームを選択して、リンクをコピーしたときの、アドレスの &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;team/&lt;/code&gt; に続く数字がチームIDです。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2023-09-24-figma-team-id.png&quot; alt=&quot;team_id&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/watermint/toolbox/releases/latest&quot;&gt;最新版のwatermint toolbox&lt;/a&gt;をダウンロードします。ダウンロードしたzipファイルを展開するとtbxまたはtbx.exeという実行ファイルがありますので、これをデスクトップフォルダなどわかりやすい場所に置いてください。 Windowsの場合はPowerShell、macOSの場合はTerminal.appを開きます。開いたら &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd Desktop&lt;/code&gt; としてデスクトップ（またはtbxの実行ファイルを置いたフォルダ)に移動して次のようにコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./tbx services figma project list -team-id xxxxxxxxxxxxxxxxxxxxx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(xxxxxxxxxxxxxxxxxxxxxは先ほどチームのアドレスから取得したチームIDに読み替えてください)&lt;/p&gt; &lt;p&gt;初回実行時には次のように認証が求められますので、エンターを押してブラウザを起動します。アプリケーションのアクセス範囲など確認が表示されますのでよければ認可します。画面に「Success」と表示されれば認証完了です。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done Opening the authorization URL: https://www.figma.com/oauth?client_id=XXXXXXXXXXXXXXX&amp;amp;redirect_uri=http%3A%2F%2Flocalhost%3A7800%2Fconnect%2Fauth&amp;amp;response_type=code&amp;amp;scope=file_read&amp;amp;state=XXXXXXXX Please press ENTER to open the auth page on the browser. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;実行完了すると次のようにプロジェクトの一覧とIDが表示されます。プロジェクト数が多い場合、一部省略されますので実行時の最後に表示されるパスのCSVやxlsxファイルを参照してください。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./tbx services figma project list -team-id xxxxxxxxxxxxxxxxxxxxx watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done | id | name | |----------|---------------| | xxxxxxxx | Design System | | xxxxxxxx | Workspace | | xxxxxxxx | toolbox | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;同様にプロジェクトのファイル一覧を取得したい場合には、次のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./tbx services figma file list -project-id xxxxxxxx watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done | key | name | thumbnailUrl | lastModified | |------------------------|--------------|--------------|--------------| | xxxxxxxxxxxxxxxxxxxxxx | essentials | | | | xxxxxxxxxxxxxxxxxxxxxx | web | | | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;必要なファイルがあれば、このファイルのkeyを取得して次のようなコマンドを実行します。 これで実行したフォルダにファイルがPDFとしてエクスポートされます。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-format&lt;/code&gt;オプションで png, svg, jpgの出力も選択可能です。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services figma file export page -key xxxxxxxxxxxxxxxxxxxxxx -path ./ watermint toolbox 122.8.52 ========================== © 2016-2023 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done 1 page(s) found in the Figma file page 00:02 [==========================================================================] 1/ 1 DONE The command finished: 7.302s &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このコマンドはファイルごとですが、ノードを出力するコマンドやチーム配下のファイルをすべてエクスポートするコマンドも用意してありますので必要に応じてお使いください。&lt;/p&gt; </content> </entry> <entry> <title>趣味のプログラム watermint toolbox と tbx</title> <link href="https://watermint.org/2022/12/31/hobbyists-program/"/> <updated>2022-12-31T00:00:00+09:00</updated> <id>https://watermint.org/2022/12/31/hobbyists-program</id> <content type="html">&lt;p&gt;趣味とある程度の実用性を備えたプログラムとして &lt;a href=&quot;https://github.com/watermint/toolbox&quot;&gt;watermint toolbox&lt;/a&gt;と最近始めた&lt;a href=&quot;https://github.com/watermint/tbx&quot;&gt;tbx&lt;/a&gt;というプロジェクトがあります。watermint toolboxは既に何度か紹介していますが、Dropbox向けのコマンドラインツールとして開発を始め、今はそれ以外にも多様なコマンドを備えるプログラムとして成長しました。執筆時点で、最初のコミットからおおよそ6年（最初のコミットが2016年11月）、toolboxとして集約する前のいくつかのサブプロジェクトも含めると6年半ほどになります。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-12-31-wicklow.jpg&quot; alt=&quot;Wicklow&quot; /&gt;&lt;/p&gt; &lt;p&gt;プログラムの仕様想定として、WindowsやmacOSなどの環境で追加ライブラリ等を必要としない、いわゆるシングルバイナリ配布できることを重視していたのでプログラミング環境としてはGoを選択しました。当時も他の言語選択肢はありましたが、Better Cとして名高いこと、開発環境の成熟度（≒IntelliJ Goプラグインの成熟度）、学習環境（Stackoverflowや書籍等の情報源）の充実度を考慮して決めたのだと思います。&lt;/p&gt; &lt;p&gt;この6年間、Goでプログラムを作ってみた成果として「Goらしくプログラムする」こともそれなりに成功したと思っています。フルタイムの仕事としてプログラムをしていたときは、言語仕様を読んだり著名なライブラリ・プログラムの設計解説や、コードを読んだりして自身の設計や開発に適用したものですが、趣味としてプログラミングを継続させようとすると違ったアプローチが必要になります。&lt;/p&gt; &lt;p&gt;趣味として成立させるにはある程度短期的に達成できる成功体験が不可欠と考えています（仕事として成立させるにも重要ですが場合により、必須ではない）。具体的にはプログラミング言語のチュートリアルとしてHello Worldの出力に始まり、ファイル入出力、簡単なモックアップやプロトタイプ作成、少し本格的な設計の取り込み、開発規模拡大に従う課題への対応と進んでいくかと思います。この一つ一つの段階があまり飛躍し過ぎてしまうと趣味としての継続が難しいと考えています。仕事であれば、ある程度段階が飛躍したとしても時間や費用をかけ習得したり、先達の助けを借りてこの飛躍を乗り切ることもできるでしょう。&lt;/p&gt; &lt;p&gt;継続は力なりと言いますが、一方で継続を実現するにはある程度の成功体験を繰り返せるための計画性も必要になってくると思いますし、実際watermint toolbox開発でもそう実感しました。この実感には裏づけとなる失敗・成功を含む別例があります。&lt;/p&gt; &lt;p&gt;結果的には同じようなプログラムを何度も作っているのですが、2013年から2015年にかけて&lt;a href=&quot;https://github.com/watermint/Semester&quot;&gt;Scalaで開発していたプロジェクト&lt;/a&gt;があります。このプログラムはもともとDDDやScala言語の理解を深めるために始めたものですが、ある程度の複雑性がある具体的なユースケースが欲しいと思い日常的に必要な課題解決（チャット操作の効率化やクラウドストレージへのファイルアップロードなど）を実装したものです。DDDやScalaの理解という意味ではある程度進んだのですが、設計がやや壮大過ぎたこともありDDD・Scalaの理解がある程度進んだという最初の（やや曖昧な）ゴールを達成したことで自然消滅的にプロジェクトが終了しました。&lt;/p&gt; &lt;p&gt;当初ゴール達成という意味では成功なのですが、失敗だと思っているのはせっかく2弱年もかけて作ったプログラムがあまり自身の資産になっていないというところが大きな理由です。その点、watermint toolboxではプログラムとしての綺麗さやGo言語の習得という以上に、実用性をより重視して短期的な問題解決を優先したこともあり短期的に成功体験が得られ、より継続的な開発が進められるようになりました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-12-31-dublin.jpg&quot; alt=&quot;Dublin&quot; /&gt;&lt;/p&gt; &lt;p&gt;今年2022年は、コロナ禍がある程度定常的なリスク・コストと認識され仕事上でも出張が再開された年でした。今年は海外へ行く機会があり、長時間フライト中は普段できない考えの整理ができるということでwatermint toolboxについても今後どうするか考えることにしました。&lt;/p&gt; &lt;p&gt;watermint toolboxは趣味と実用という意味ではなかなかの成功を収めたと思っています。これをさらに10年・20年とライフワーク的に開発し、資産として形成するにはどうすればよいか考えました。一つの議論はこのままGo言語で開発を進めるかということです。&lt;/p&gt; &lt;p&gt;Goは手軽さやエコシステムの充実といった意味で非常に優れていると思っています。一方でいくつかの理由によりある程度の大きさのプログラムを保守するのも難しそうだとも感じています。理由をある程度絞ると次の二つが挙げられます。&lt;/p&gt; &lt;p&gt;一つ目は型システムがJavaやScalaなどと比較しあまり充実しておらず、特にインタフェースの設計と実装ならびに保守がなかなか手間がかかることです。Go 1.18では待望のGenericsが導入されましたが、誤解を恐れず言えば適用範囲は限定的で関数の定義をマクロ的に複数型対応にコンパイル時に展開してくれる。という程度のもので、変数の宣言や構造体にGenericsのフィールドを定義できないなど型情報を資産として形成できるほどの機能はありません。このため、たとえばある型の配列から条件に合う値のみを抽出して別の配列を作成するという処理もGoでは毎回forループを書かなければなりません。そのforループにバグがあったりテストを書いたりしなければならないコストは趣味のプログラムには無視できない大きさです。&lt;/p&gt; &lt;p&gt;二つ目はエラー処理です。前述の型とも関連しますが現状のGo Genericsでは Javaでいう&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.Optional&amp;lt;T&amp;gt;&lt;/code&gt;・Scalaでいう&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option[+A]&lt;/code&gt;といったnullに頼らないライブラリ群の構築ができません。Goでのエラー処理は戻り値リストの最後にerrorを返すというのが慣例です。この、errorもerrorインタフェースを実装したポインタということで、毎回型を調べてキャストしたり、別関数で判定したりと統一感もなく注意深くドキュメントを読んだとしてもエラー処理にまつわる不具合を生じやすいことが大きな問題だと感じています。&lt;/p&gt; &lt;p&gt;たとえばファイルが指定パスに存在するかどうかはGoでは次のように判定します。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lstat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path/to/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 存在する場合の処理&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このLstatが返すエラーは PathErrorという構造体のものですが、このエラーの詳細を知ろうとする場合は次のようにキャストして調べる必要があります。errorは実際にはどのような型のものかドキュメントやソースを見なければ分からず、Javaでいうところの、全てjava.lang.Exceptionとして例外を扱っているようなものです。議論の余地はあるでしょうけれど、Goで6年プログラムしてみて有益と感じたことはありませんでした。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lstat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path/to/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ファイルが存在しない場合の処理&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Op[%s] Path[%s] Error[%s]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Goのエコシステム、プログラミング環境の充実度はすばらしく、たとえば&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/util-qrcode-create.html&quot;&gt;QRコードを作るプログラム&lt;/a&gt;を作りたいなと思ったとき、&lt;a href=&quot;https://github.com/boombuler/barcode&quot;&gt;boombuler/barcode&lt;/a&gt;のようなライブラリがすぐに見つかります。 短期的な成功体験を得るという趣味のプログラムを支えるにはぴったりです。&lt;/p&gt; &lt;p&gt;しかし、10年後に資産となるプログラムという意味では少し言語機能が不足していると感じるのと、ある程度プログラムが大きくなってきた時に駆られる「全部書き直したい」というモチベーションを考慮して並行して新しいプロジェクトを始めることにしました。&lt;/p&gt; &lt;p&gt;新しいプロジェクトを始めるにあたって、6年前と比べればプログラミングの環境も大きく変わったように見えます。GraalVMやKotlin Native、Scala Nativeなどの登場・成熟で実行ファイルのバイナリ配布の敷居が下がり、選択肢が増えました。&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot;&gt;TIOBEのプログラミング言語コミュニティ指標&lt;/a&gt;を見てみると、Pythonがこの5〜6年で急成長しトップになり、Javaは今月発表された結果ではついにトップ3から陥落し4位になるなど様変わりしたようです。&lt;/p&gt; &lt;p&gt;新しいプロジェクトの言語をどれにするかは2ヶ月ほど悩んだ結果、Rustを使うことにしました。選定理由はGoではない言語にしようと考えた理由である(1) 型周りが充実していることが最重要で、(2) エコシステムがある程度大きく必要なライブラリが探せること、(3) どうせなら本格的にプログラミングで使ったことのない言語といった理由からです。&lt;/p&gt; &lt;p&gt;趣味のプログラムとしてRustを始めるにあたっては、バランスの問題でwatermint toolboxを始めた頃と比べて違う計画を立てました。watermint toolboxは短期的な成功体験を継続することで成長させてきましたが、新しいプロジェクトで同じことをやると新しいプロジェクト側の方が当然楽しくなってしまい、旧プロジェクトを触らなくなってしまいます。&lt;/p&gt; &lt;p&gt;これを避けるために新プロジェクト側はある程度長期的なゴール設定をし2つのプロジェクトを並行して進めることにしました。watermint toolboxは引き続き短期的な問題解決のために、tbxは10年後を見据えた資産にしていくことに。tbxでは、具体的な実行可能プログラムよりはライブラリ群を最初に整備していくことでRustを習得しつつ、ある程度加速的に開発できる状態までライブラリ群が成熟した段階でwatermint toolboxの機能を逐次取り込み置き換えを目指すというものです。&lt;/p&gt; &lt;p&gt;Rustを習得するにあたっては、いくつか順番をおって実装していくことにしました。まずは文字列操作、続いて&lt;a href=&quot;https://github.com/watermint/tbx/blob/0.2/tbx_essential/src/text/uuid.rs&quot;&gt;UUIDなど今後利用するであろうライブラリ&lt;/a&gt;の実装、乱数など外部ライブラリをラッピングしたライブラリの構築といった順番です。細かくテストできる範囲から実装することで、所有権などRustならではのコンセプトを学びます。既存の優れたライブラリをラッピングすることは漢字の書き取りのような感じで、読むだけでは思いつかないテクニックや設計が学べます。&lt;/p&gt; &lt;p&gt;おそらくこのようなライブラリ群で文字列、数値、時間、KVSやデータベース、ログなどを実装またはラッパーを実装することで学びを深め、1〜2年後ごろから本格的な実装をしていくという予定です。果たしてこのような計画で進めるかはわかりませんが、継続を優先し楽しく来年もコードを書いていきたいと思います。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-12-31-dublin2.jpg&quot; alt=&quot;Dublin&quot; /&gt;&lt;/p&gt; &lt;p&gt;皆様もよいお年をお迎えください。&lt;/p&gt; </content> </entry> <entry> <title>watermint toolboxでもっと手軽に負荷モニタリングしたい (ログ取得編)</title> <link href="https://watermint.org/2022/09/18/monitoring-by-watermint-toolbox/"/> <updated>2022-09-18T00:00:00+09:00</updated> <id>https://watermint.org/2022/09/18/monitoring-by-watermint-toolbox</id> <content type="html">&lt;p&gt;色々と検証作業をしていると様々な情報が欲しくなる。プログラムがうまくいかなかったのがCPUを使い切ったからなのか、ネットワーク帯域が足りなかったからなのか大まかには知りたい。&lt;/p&gt; &lt;p&gt;こういう時、まずOSごとに装備されているモニタリングツールが違うのでWindows、macOS、Linuxを混在環境で使っているとこの時点で毎回この差異に気をつかう。データを時系列で残すのも難しくはないが、ちゃんとやるとなかなか面倒だ。かといって、本格的なモニタリングツールの導入は監視サーバを立てたり監視サーバまでのネットワーク疎通はどうしようかと悩んでいると結局そこまで準備するぐらいなら今回は諦めようとなる。&lt;/p&gt; &lt;p&gt;CPU負荷やネットワーク状況、ストレージIOなど欲を言えばIOPSが欲しいとか、毎秒の分解能が欲しいとか、プロセスごとのCPU・メモリ利用が欲しいとか様々欲しくなるが、まずそういった細かな情報よりも最低限の情報がささっと手軽にとれるツールが欲しい。&lt;/p&gt; &lt;p&gt;なければ作れば良いということで、2016年よりコツコツ開発している&lt;a href=&quot;https://github.com/watermint/toolbox&quot;&gt;watermint toolbox&lt;/a&gt;というプロジェクトのコマンドの一つとして実装した。&lt;/p&gt; &lt;p&gt;今回はまだモニタリングして情報収集するところまでで、分析をするツールまでは作っていない。取得するデータはJSON形式データで集まるのでまずはJSON加工ツールや簡単なスクリプトを書いて分析するつもりのため、分析はまた将来的な拡張のお楽しみに。&lt;/p&gt; &lt;h1 id=&quot;概要&quot;&gt;概要&lt;/h1&gt; &lt;p&gt;今回は&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/util-monitor-client.html&quot;&gt;util monitor client&lt;/a&gt;というコマンドとして実装した。 watermint toolboxはマルチプラットホーム対応でWindows、macOS (x64/M1)、Linux (x64/arm64)に対応した&lt;a href=&quot;https://github.com/watermint/toolbox/releases/latest&quot;&gt;それぞれのバイナリを配布している&lt;/a&gt;。シングルバイナリ動作するようコンパイルしてあるので、ほとんどの場合追加ライブラリは必要なく動作する。(なお、Alpine Linuxの場合は&lt;a href=&quot;https://github.com/watermint/toolbox/discussions/641&quot;&gt;TBX on Alpine Linux&lt;/a&gt;を参照)&lt;/p&gt; &lt;p&gt;このモニタリングツールはデフォルトでは10秒間隔で各種統計を取り、1時間に一度ローカルディスクに蓄積してあるデータをDropboxへ同期する。同期完了後にローカルディスクのデータは削除される。データはすべてDropboxのフォルダに集約されるので、監視サーバを立てたり、監視サーバまでの通信経路に気を遣わなくてもインターネットにさえ出られれば良い。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-09-18-monitor-files-on-dbx.png&quot; alt=&quot;Dropboxに保存されたデータ&quot; /&gt;&lt;/p&gt; &lt;p&gt;データは自動的に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;対象名&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yyyy-mm&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yyyy-mm-dd&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tbx-monitor-対象名-UNIXTIME.log.gz&lt;/code&gt; のようなフォルダ・ファイル名でgzip圧縮形式で保存される。また、watermint toolboxがクラッシュしてファイルがアップロードされていない場合は、再度同じように実行すれば次回実行時の同期処理時にすべてのファイルをアップロードする。なお、同期処理前はgzip圧縮が未実施のためローカルディスクの消費は1時間分で500KiB程度のサイズとなる。&lt;/p&gt; &lt;p&gt;ファイルサイズは概ね圧縮後で50KiB (10秒間隔・1時間分)、1日分でおおよそ1.2MB程度になる。これならば数週間といった単位で数台を監視してもさほど気にならないと思う。将来的には分析ツール部分を作る際にTSDBに格納しながらもう少しコンパクトなデータ形式で格納することになると思うが、今のフォルダ・ファイル形式でも分析までの受け渡しとしてはこの程度で良いだろうと思っている。&lt;/p&gt; &lt;h1 id=&quot;使い方&quot;&gt;使い方&lt;/h1&gt; &lt;p&gt;コマンド実行オプションなど詳細は&lt;a href=&quot;https://toolbox.watermint.org/ja/commands/util-monitor-client.html&quot;&gt;util monitor client&lt;/a&gt;を参照いただきたいが大まかな流れは次の通り。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;初回実行時にログをアップロードするDropboxアカウントへの認証を求められる&lt;/li&gt; &lt;li&gt;表示されたURLをブラウザに貼り付け認可&lt;/li&gt; &lt;li&gt;その後表示されるコードをプログラムに貼り付ける&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;認可で取得した認証トークンは $HOME/.toolbox/secrets/secrets.db に格納される。2度目以降の実行ではここから認証トークンを取得するので再認証は不要である。&lt;/p&gt; &lt;p&gt;また、認証トークンを格納するファイルは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-auth-database&lt;/code&gt; オプションでも指定可能である。たとえば次のように実行すると $HOME/Desktop/secrets.db に認証情報が保管される。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tbx util monitor client -auth-database $HOME/Desktop/secrets.db -name MONITOR_NAME -data-path $HOME/.toolbox/monitor -sync-path /monitor &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;これを応用すれば仮想マシンなどで認証操作をとばして監視を実施したい場合でも、認証データファイルと一緒にデプロイすれば良い。当然ながら、認証データファイルはパスワードと同様のものなのでアクセス権限などをしっかり設定することは前提となる。&lt;/p&gt; &lt;h1 id=&quot;長期間モニタリング&quot;&gt;長期間モニタリング&lt;/h1&gt; &lt;p&gt;watermint toolboxはデバッグのために各種ログを自動的に出力するようになっている。これらのログは問題原因を探るには良いのだが、長期間モニタリングするにはストレージ容量を圧迫する懸念があるかもしれない。watermint toolboxは自動的にログローテートし一定サイズ以上にログファイルが肥大化しないように設計しているが、プログラムのクラッシュ等で回収しきれないログが残存する場合もある。&lt;/p&gt; &lt;p&gt;このような場合は次のように &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-skip-logging&lt;/code&gt; オプションを追加すると良い。このオプションにより、ほとんどのログがストレージへ書き込み処理なく実行されるのでログによるストレージ圧迫の懸念がなくなる。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tbx util monitor client -auth-database $HOME/Desktop/secrets.db -name MONITOR_NAME -data-path $HOME/.toolbox/monitor -sync-path /monitor -skip-logging &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;まだログの解析部分についてのプログラムがないので、負荷モニタリングという意味では道半分というところだ。今回のモニタリングプログラムについては、&lt;a href=&quot;https://github.com/shirou/gopsutil&quot;&gt;gopsutil&lt;/a&gt;プロジェクトの成果物を利用させていただいたので、ほぼ技術的な困難性はなかった。あえていうと、認証トークンが簡単にデプロイできるよう認証まわりのフレームワークを大きく書き換えたことが最も困難性が高かった。&lt;/p&gt; &lt;p&gt;またいつになるかはわからないが、解析編として解析プログラムが出来上がったときには紹介したいと思う。s&lt;/p&gt; </content> </entry> <entry> <title>ブレーカー付きタップ選び</title> <link href="https://watermint.org/2022/03/28/outlet/"/> <updated>2022-03-28T00:00:00+09:00</updated> <id>https://watermint.org/2022/03/28/outlet</id> <content type="html">&lt;p&gt;ブレーカー付きタップを複数設置しようとすると、タップの出っ張りが干渉して複数設置できないという悲しい状態になりました。 タップを綺麗に配置したかったので今回は複数のブレーカー付きタップを準備して検証しました。 残念ながら今回準備したどのタップメーカーも寸法仕様がWebページ上にないようだったので、これから購入される方の参考になれば。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-03-28-outlet1.jpg&quot; alt=&quot;比較&quot; /&gt;&lt;/p&gt; &lt;p&gt;上図は左からオーム電機の&lt;a href=&quot;https://www.ohm-electric.co.jp/product/c23/c2314/29017/&quot;&gt;HS-TMP2HH3-W&lt;/a&gt;、&lt;a href=&quot;https://www.ohm-direct.com/shopdetail/000000025920/&quot;&gt;HS-TM1AHL3-W&lt;/a&gt;、ヤザワの&lt;a href=&quot;https://www.yazawa.co.jp/products/item/15696/&quot;&gt;Y02FUBHKS210BK&lt;/a&gt;、朝日電器 ELPAの&lt;a href=&quot;https://www.elpa.co.jp/product/el01/elpa405.html&quot;&gt;A-S400B&lt;/a&gt;と並べた様子。 こうして並べてみるとわかりやすいのですが、プラグ部分から上の出っ張りが各社まあまあ違います。この中ではELPAが最も出っぱっていて、他のコンセントに干渉しやすい形をしています。&lt;/p&gt; &lt;p&gt;なおHS-TM1AHL3-Wはブレーカーはついていない発煙ガードタップ。発煙ガードとは、オーム電機の特許で内部温度が150度以上になると自動的に通電が遮断されるヒューズのような安全装置のよう。 動画での解説を見る限りはヒューズのように使い捨てになる模様。HS-TMP2HH3-Wはブレーカーに加え、この発煙ガードが付いているよう。&lt;/p&gt; &lt;p&gt;さて、ヤザワ・朝日電器のものはプラグ部分からタップ上部まで出っ張りがあり、ここが干渉します。 出っ張り部分の長さを調べてみると、ヤザワ・朝日電器は17mm以上あります(下図はヤザワのY02FUBHKS210BK)。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-03-28-outlet3.jpg&quot; alt=&quot;Y02FUBHKS210BK&quot; /&gt;&lt;/p&gt; &lt;p&gt;オーム電機のものはHS-TMP2HH3-WもHS-TM1AHL3-Wも9mm〜10mm程度。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-03-28-outlet2.jpg&quot; alt=&quot;HS-TMP2HH3-W&quot; /&gt;&lt;/p&gt; &lt;p&gt;壁側2口コンセントの間隔を測ると24mm程度。 つまり2つ設置したい場合、出っ張りは12mm以内である必要があります。 (3口コンセントの場合はさらに狭くなります)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-03-28-outlet4.jpg&quot; alt=&quot;コンセントの間隔&quot; /&gt;&lt;/p&gt; &lt;p&gt;このため消去法でオーム電機 HS-TMP2HH3-Wのみがブレーカー付きタップとして2つできる唯一のもののよう。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-03-28-outlet5.jpg&quot; alt=&quot;設置完了&quot; /&gt;&lt;/p&gt; &lt;p&gt;2つ刺してみても少し余裕があってとてもレイアウトしやすいタップだということがよくわかりました。&lt;/p&gt; </content> </entry> <entry> <title>BromptonとGarmin Varia RTL515のマウント</title> <link href="https://watermint.org/2022/01/25/brompton-garmin/"/> <updated>2022-01-25T00:00:00+09:00</updated> <id>https://watermint.org/2022/01/25/brompton-garmin</id> <content type="html">&lt;p&gt;そろそろ乗り始めて丸6年になる折り畳み自転車Bromptonにサイクルコンピュータを導入することにしました。&lt;/p&gt; &lt;p&gt;昨年からiPhoneを使ってWithingsのHealth Mateアプリを使ったり、Stravaアプリを使ったりしてサイクリングの記録を残していましたが、 うまく記録が取れないことが増えてきていました。 ネットワークの調子なのかBluetoothの調子なのか、GPS信号がうまくiPhoneで取得できていないのか原因は定かではないですが 100kmぐらい走ったなかの前半50kmぐらいしか記録されていなかったり、全く記録されていなかったりと安定しません。&lt;/p&gt; &lt;p&gt;いろいろ検討の結果対策としてサイクルコンピュータ &lt;a href=&quot;https://www.garmin.co.jp/products/intosports/edge-530/&quot;&gt;Garmin Edge 530&lt;/a&gt; を導入しました。 今回はこのサイクルコンピュータと連動して使えるテールライト、&lt;a href=&quot;https://www.garmin.co.jp/products/intosports/varia-rtl-515/&quot;&gt;Varia RTL515&lt;/a&gt;のお話。 このRTL515を使うと、レーダーで後続の車やバイクなどが接近してきたことをEdge 530と連動してアラームを出したり後方の状況が確認できます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-01-24-garmin-edge530-rtl515.jpg&quot; alt=&quot;Garmin Edge 530とVarita RTL515&quot; /&gt;&lt;/p&gt; &lt;p&gt;上図は実際にアラームが出ている状態です。写真では信号待ちで停車中ですが、後ろから車が接近していることを検出してアラームと表示で警告が出ています。&lt;/p&gt; &lt;p&gt;このように車やバイクなどが急接近すると赤色表示になって、複数台車がきていれば右側の丸印が複数表示されるという仕組みです。 最近はEVやハイブリッド車など静かに近づいてくる車も増えましたし、自転車専用道路を走っていても後ろからロードバイクなどで全速力で飛ばしてくる方もがいるのでヒヤヒヤします。 良識ある方々はスピードを落とした上で「通りま〜す」など、一声かけてくださるのですが残念ながらそういった方は少数で、強引に抜かそうとされる方も多く自衛手段を検討せざるを得ません。 こういったヒヤヒヤが少しでも緩和されるという意味ではとても価値のある製品かと思います。&lt;/p&gt; &lt;p&gt;さて表題の通りRTL515というテールライトのマウントについてですが、Bromptonは折り畳み自転車ということもあってマウントできる位置が限られます。 折りたたんだ後でも干渉しない位置にマウントしたかったのですが標準添付されているゴムパッドではうまく取りつきません。 どうしようか思案していたところ、面ファスナーで設置することを思いつきました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-01-24-rtl515-mount.jpg&quot; alt=&quot;Varita RTL515のマウント&quot; /&gt;&lt;/p&gt; &lt;p&gt;少し強引ですがRTL515標準付属のシートポストマウントには幅1cm程度の穴が空いています。ここに面ファスナーを通して、ぐるりと回して取り付けました。 ややぐらぐらしますが、面ファスナーの安定性が高いので標準のゴムパッドで付けるよりはなんとなく面ファスナーの方が信頼性がありそうにも感じます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2022-01-24-fastener.jpg&quot; alt=&quot;面ファスナー&quot; /&gt;&lt;/p&gt; &lt;p&gt;さて、この面ファスナーですが100円均一にちょうどいいサイズ感の物がありました。この製品の1cmの幅というのがなかなか絶妙で幅は調整することなくこのまま利用できました。 同じようにブロンプトンにRTL515をマウントさせようという方のご参考になれば幸いです。&lt;/p&gt; </content> </entry> <entry> <title>Migrate to Cloudflare Pages</title> <link href="https://watermint.org/2022/01/24/migrate-to-cloudflare-pages/"/> <updated>2022-01-24T00:00:00+09:00</updated> <id>https://watermint.org/2022/01/24/migrate-to-cloudflare-pages</id> <content type="html">&lt;p&gt;I mentioned that this site moved &lt;a href=&quot;/2020/11/21/remove_google_analytics_and_amazon_affiliate/&quot;&gt;from GitHub Pages to Cloudflare Workers&lt;/a&gt;. This time, I changed the infrastructure to Cloudflare Pages. This change will not affect tracking code removal.&lt;/p&gt; </content> </entry> </feed>