<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"> <title>watermint.org</title> <link href="https://watermint.org/atom.xml" rel="self"/> <link href="https://watermint.org/"/> <updated>2020-11-03T22:57:28+09:00</updated> <id>https://watermint.org</id> <author> <name>Takayuki Okazaki</name> <uri>https://twitter.com/watermint</uri> </author> <rights>(c) 2005-2020 Takayuki Okazaki</rights> <entry> <title>Dropbox/Dropbox Business: 共有リンクを操作するCLI - watermint toolbox</title> <link href="https://watermint.org/2020/08/15/dropbox-sharedlink-cli/"/> <updated>2020-08-15T00:00:00+09:00</updated> <id>https://watermint.org/2020/08/15/dropbox-sharedlink-cli</id> <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;ではDropboxまたはDropbox Business用のコマンドを各種揃えています。今回はDropboxの個人アカウントまたはDropbox Businessチーム全体に対する共有リンクを操作するコマンドを紹介します。&lt;/p&gt; </content> </entry> <entry> <title>WIFI Router Review: NETGEAR RAX120</title> <link href="https://watermint.org/2020/08/04/netgear-rax120-en/"/> <updated>2020-08-04T00:00:00+09:00</updated> <id>https://watermint.org/2020/08/04/netgear-rax120-en</id> <content type="html">&lt;p&gt;I installed a new Wifi router called &lt;a href=&quot;https://www.jp.netgear.com/home/products/networking/wifi-routers/RAX120.aspx&quot;&gt;NETGEAR AX12 RAX120&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I had a router, the&lt;a href=&quot;https://www.synology.com/ja-jp/products/MR2200ac&quot;&gt;Synology MR2200ac&lt;/a&gt; before, but it would frequently lose its internet connection and would not recover without rebooting the router again. Looking at the router logs and stats, it seemed that in situations when things weren’t working, the router’s CPU usage was up considerably, with a load average of 4-5 (usually less than 1). Because of this, I decided to find a router with a more powerful CPU and replace it, probably due to the lack of CPU specs.&lt;/p&gt; &lt;h1 id=&quot;by-way-of-elimination&quot;&gt;By way of elimination&lt;/h1&gt; &lt;p&gt;I have subscribed to the IPoE option of&lt;a href=&quot;https://www.iijmio.jp/imh/&quot;&gt;IIJmio HIKARI&lt;/a&gt;for my home network environment. I had to choose a router that supports DS-Lite. When I looked for it, there didn’t seem to be many &lt;a href=&quot;https://www.mfeed.ad.jp/transix/dslite/dslite.html#transix-ipv4%E6%8E%A5%E7%B6%9A-ds-lite-%E5%AF%BE%E5%BF%9C%E6%A9%9F%E7%A8%AE&quot;&gt;supported products&lt;/a&gt; yet, and when I narrowed it down to those that were Wifi 6 compatible, the choice was narrowed again. Furthermore, because I wanted to make the antenna less spiky and protruding, I decided on the&lt;a href=&quot;https://www.jp.netgear.com/home/products/networking/wifi-routers/RAX120.aspx&quot;&gt;NETGEAR AX12 RAX120&lt;/a&gt;by a process of elimination.&lt;/p&gt; &lt;h1 id=&quot;review&quot;&gt;Review&lt;/h1&gt; &lt;p&gt;Although the strength of the radio wave is perfect, there are a few areas where I feel it is inferior to the Synology MR2200ac, so I will introduce those areas.&lt;/p&gt; &lt;h2 id=&quot;the-log-is-useless&quot;&gt;The log is useless.&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-29-netgear-rax120.png&quot; alt=&quot;log&quot; /&gt;&lt;/p&gt; &lt;p&gt;You can get the log from the admin screen, but this log is almost useless. First, the log does not contain the time. In addition, if the length of one line exceeds 128 bytes, the excess is ignored and the full text cannot be read. When I set up the log to be sent by email, the error was not read in full, and I was finally unable to figure out why.&lt;/p&gt; &lt;p&gt;The connection from the iPhone and other devices seemed to be dropping off from time to time, and the connection seemed to be working from the iPhone side, so I tried to find out if it was a DHCP problem, but I couldn’t see any logs that might lead to it. When setting up DS-Lite, the connection screen also shows an error, but I didn’t know what exactly failed.&lt;/p&gt; &lt;p&gt;For practical purposes, it is best to assume that this product does not have a logging and display function. I would love to see improvements in this area.&lt;/p&gt; &lt;h2 id=&quot;the-web-gui-is-rather-poor&quot;&gt;The web GUI is rather poor&lt;/h2&gt; &lt;p&gt;There is a management function in the smartphone application. This one is quite simple and easy to read and display. I think it is well made.&lt;/p&gt; &lt;p&gt;On the other hand, the GUI of Synology is very good, so I have to say that NETGEAR side is inferior in quality when compared between these two models. There is no time-series information on CPU or memory usage statistics, nor does it seem to be able to be retrieved as a log.&lt;/p&gt; &lt;p&gt;The GUI is only used for initial setup and when you have no trouble, so the importance of this evaluation depends on the situation. NETGEAR’s GUI was severely degrading to my satisfaction. Because there is no hint to analyze network connection problems this time.&lt;/p&gt; &lt;p&gt;Although the network disconnection issue was not finally resolved by Synology. But there was a sense of relief in being able to see information such as statistics and errors.&lt;/p&gt; &lt;h2 id=&quot;netgear-armor&quot;&gt;NETGEAR ARMOR&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://www.jp.netgear.com/landings/armor/&quot;&gt;NETGEAR ARMOR&lt;/a&gt;, Bitdefender’s vulnerability scanning, automatic threat blocking and anti-malware software, is available as an additional option with an annual subscription.&lt;/p&gt; &lt;p&gt;Fortunately, no threatening incidents have occurred yet, so it’s unknown how secure it will be. But it seems to provide a certain level of security when you connect your old iPhone or Android for testing and such.&lt;/p&gt; &lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt; &lt;p&gt;The setup is also relatively well done in Leave It to Me mode, so I would say it’s a very straightforward router if you can work with everything being left to you. On the other hand, when something goes wrong, it can be difficult to get to the cause of the problem.&lt;/p&gt; </content> </entry> <entry> <title>WIFIルーター評: NETGEAR RAX120</title> <link href="https://watermint.org/2020/08/03/netgear-rax120/"/> <updated>2020-08-03T00:00:00+09:00</updated> <id>https://watermint.org/2020/08/03/netgear-rax120</id> <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.jp.netgear.com/home/products/networking/wifi-routers/RAX120.aspx&quot;&gt;NETGEAR AX12 RAX120&lt;/a&gt;というWifiルーターを新しく導入しました。&lt;/p&gt; &lt;p&gt;少し前まで&lt;a href=&quot;https://www.synology.com/ja-jp/products/MR2200ac&quot;&gt;Synology MR2200ac&lt;/a&gt;というルーターを使っていましたが、頻繁にインターネット接続が切れてしまい、またルーターを再起動しないと復元しませんでした。ルーターのログや統計情報を見てみるとうまくいかない状況下ではルーターのCPU使用率がかなり上がっており、Load averageで4〜5 (いつもは1未満)になっているようでした。 このことから、おそらくCPUスペックが不足しているだろうということでより強力なCPUをもつルーターを探して入れ替えることにしました。&lt;/p&gt; &lt;h1 id=&quot;消去法にて&quot;&gt;消去法にて&lt;/h1&gt; &lt;p&gt;自宅ネットワーク環境は&lt;a href=&quot;https://www.iijmio.jp/imh/&quot;&gt;IIJmioひかり&lt;/a&gt;のIPoEオプションを契約しています。DS-Liteに対応したルーターを選ぶことになりました。探してみるとまだあまり&lt;a href=&quot;https://www.mfeed.ad.jp/transix/dslite/dslite.html#transix-ipv4%E6%8E%A5%E7%B6%9A-ds-lite-%E5%AF%BE%E5%BF%9C%E6%A9%9F%E7%A8%AE&quot;&gt;対応製品&lt;/a&gt;は多くないようで、Wifi 6に対応したものに狭めるとまた選択肢が狭まりました。さらにアンテナがあまりトゲトゲと飛び出していないものにしたかったので消去法にて&lt;a href=&quot;https://www.jp.netgear.com/home/products/networking/wifi-routers/RAX120.aspx&quot;&gt;NETGEAR AX12 RAX120&lt;/a&gt;に決定しました。&lt;/p&gt; &lt;h1 id=&quot;評価&quot;&gt;評価&lt;/h1&gt; &lt;p&gt;電波強度は申し分ないのですが、どちらかというとSynology MR2200acと比べ劣ると感じる部分がいくつかありますのでそちらを紹介していきます。&lt;/p&gt; &lt;h2 id=&quot;ログが使い物にならない&quot;&gt;ログが使い物にならない&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-29-netgear-rax120.png&quot; alt=&quot;ログ&quot; /&gt;&lt;/p&gt; &lt;p&gt;管理画面からログを取得できますが、このログはほとんど使い物になりません。まず、ログに時刻が含まれない。さらに、ログ1行の長さが128バイトを超えると超過分は無視され記録され全文は読み取れません。ログをメールで送信する設定をした際もエラーが全文読み取れず、原因はついに分からずじまいでした。&lt;/p&gt; &lt;p&gt;iPhoneなどからの接続が時々切れているように見え、iPhone側からは接続ができているように見えていたのでDHCP問題かと思い調べようとしたところ、それに繋がりそうなログは一切表示されませんでした。DS-Liteの設定時も接続画面ではエラーと表示されるが具体的に何が失敗したのかはわかりませんでした。&lt;/p&gt; &lt;p&gt;実用上、本機にログ取得・表示機能は無いと考えた方が良いでしょう。このあたりは是非改善していただきたいところです。&lt;/p&gt; &lt;h2 id=&quot;web-guiは貧弱&quot;&gt;Web GUIは貧弱&lt;/h2&gt; &lt;p&gt;スマートフォンアプリにて管理機能がありますがこちらはなかなか項目もシンプルで表示も見やすく、よくできていると思います。&lt;/p&gt; &lt;p&gt;一方、Web GUIについてはSynologyのGUIは非常に良くできているのでこの2機種で対比するとNETGEAR側がかなり見劣りすると言わざるを得ないでしょう。CPUやメモリ利用の統計情報も時系列情報はありませんし、ログとしても取り出せないようです。&lt;/p&gt; &lt;p&gt;GUIは初期設定と、トラブル対応時くらいしか利用しませんからトラブルさえなければこの評価の重要性は状況によって大きく変わります。今回引き続きネットワーク接続の問題が出ているので手がかりがほぼゼロと言えるNETGEARのGUIは満足度を酷く低下させるものでした。&lt;/p&gt; &lt;p&gt;Synologyでもネットワーク接続断の問題は最終的に問題解決には至りませんでしたが、統計情報やエラーなど情報が見えることによる安心感があったように思います。&lt;/p&gt; &lt;h2 id=&quot;netgear-armor&quot;&gt;NETGEAR ARMOR&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://www.jp.netgear.com/landings/armor/&quot;&gt;NETGEAR ARMOR&lt;/a&gt;というBitdefenderによる脆弱性スキャン、脅威の自動ブロック、アンチマルウエアソフトウエアが年間サブスクリプションでの追加オプションとして利用できます。&lt;/p&gt; &lt;p&gt;幸いなことにまだ脅威となるインシデントは発生していないのでどの程度の安心かは未知数ですが、テストなどのために古いiPhoneやAndroidを接続してテストするときには一定の安心感が得られそうです。&lt;/p&gt; &lt;h1 id=&quot;総評&quot;&gt;総評&lt;/h1&gt; &lt;p&gt;セットアップもお任せモードが比較的良くできているので、すべてお任せという状態で動けばとても素直なルーターと言えると思います。一方で、何かトラブルが発生したときにはその原因にたどり着くの難しく、賭けの要素が強い製品です。&lt;/p&gt; </content> </entry> <entry> <title>Batch Gmail filter creation CLI - watermint toolbox</title> <link href="https://watermint.org/2020/07/28/gmail-filter-cli-en/"/> <updated>2020-07-28T00:00:00+09:00</updated> <id>https://watermint.org/2020/07/28/gmail-filter-cli-en</id> <content type="html">&lt;p&gt;New Gmail-related commands have been added to the &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;. This allows you to get a list of emails from the command line, add/remove/rename labels, and add/remove filters.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail label list watermint toolbox 72.4.544 ========================== © 2016-2020 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done Opening the authorization URL: https://accounts.google.com/o/oauth2/auth?client_id=xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com&amp;amp;redirect_uri=http%3A%2F%2Flocalhost%3A7800%2Fconnect%2Fauth&amp;amp;response_type=code&amp;amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.labels&amp;amp;state=xxxxxxxx Please press ENTER to open the auth page on the browser. | name | type | |------------------------------|--------| | CHAT | system | | SENT | system | | INBOX | system | | IMPORTANT | system | | TRASH | system | | DRAFT | system | | SPAM | system | | CATEGORY_FORUMS | system | | CATEGORY_UPDATES | system | | CATEGORY_PERSONAL | system | | CATEGORY_PROMOTIONS | system | | CATEGORY_SOCIAL | system | | STARRED | system | | UNREAD | system | | services/google.com | user | | services/accounts.google.com | user | | services/youtube.com | user | The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200727-074430.001/report/labels.csv The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200727-074430.001/report/labels.json The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200727-074430.001/report/labels.xlsx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you want to use it, please use &lt;a href=&quot;https://github.com/watermint/toolbox/releases/tag/72.4.544&quot;&gt;Release 72&lt;/a&gt; or later.&lt;/p&gt; &lt;p&gt;I label and manage each source to some extent as I process a variety of emails. This is also a bit of a hassle when the number of source types increases, and I counted the number of labels in the command I created this time, and there are already 343 labels.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail label list -output json | jq 'select(.type == &quot;user&quot;) | .id ' | wc -l 343 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I checked the number of filters created in the same way and found 474.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail filter list -output json | wc -l 474 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I have been making labels and filters by hand for several years now, but it’s getting tedious, so I made it possible to create labels and filters in batches based on certain conditions. So far, it’s not fully automated, but semi-automated once the CSV data file is created.&lt;/p&gt; &lt;h2 id=&quot;create-the-source-data-for-the-labelfilter-you-want-to-create&quot;&gt;Create the source data for the label/filter you want to create.&lt;/h2&gt; &lt;p&gt;There are two types of Gmail labels. (1) system labels that are automatically assigned by Gmail, such as INBOX and SPAM, and (2) user-defined user labels. In this time, I’m going to get the list of emails in INBOX and get the data with no user labels attached. In this case, I will add label conditions based on the destination address and source address of the email.&lt;/p&gt; &lt;p&gt;First of all, get the email data, get the source address, and make rules for each domain. I’ve omitted quite a bit, but I get the mail data in JSON format, process it with the jq command and output it as CSV. The first column is the query, the second column is the label to be added, and the third column is the label to be removed. The third column is not specified. If you want to archive automatically, you can do so by deleting INBOX.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail message processed list -output json | jq -r 'select(.label_type_user | length ==0) | .from.address | [&quot;from:&quot;+., &quot;services/&quot;+capture(&quot;@(?&amp;lt;d&amp;gt;\\b([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}\\b)&quot;).d] | @csv' | sort -u &quot;from:families-noreply@google.com&quot;,&quot;services/google.com&quot; &quot;from:googlecommunityteam-noreply@google.com&quot;,&quot;services/google.com&quot; &quot;from:no-reply@accounts.google.com&quot;,&quot;services/accounts.google.com&quot; &quot;from:no-reply@google.com&quot;,&quot;services/google.com&quot; &quot;from:noreply-purchases@youtube.com&quot;,&quot;services/youtube.com&quot; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Create a batch filter based on this data. It also automatically creates any missing labels and applies them to the messages in the INBOX.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail filter batch add -add-label-if-not-exist -apply-to-inbox-messages -peer waterlandpier -file ~/filters.csv watermint toolbox `dev` ======================= © 2016-2020 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Creating a filter: from:families-noreply@google.com from:families-noreply@google.com: Updating message 1 from:families-noreply@google.com: Updating message 2 Creating a filter: from:googlecommunityteam-noreply@google.com from:googlecommunityteam-noreply@google.com: Updating message 1 Creating a filter: from:no-reply@accounts.google.com from:no-reply@accounts.google.com: Updating message 1 from:no-reply@accounts.google.com: Updating message 2 from:no-reply@accounts.google.com: Updating message 3 from:no-reply@accounts.google.com: Updating message 4 from:no-reply@accounts.google.com: Updating message 5 from:no-reply@accounts.google.com: Updating message 6 from:no-reply@accounts.google.com: Updating message 7 Creating a filter: from:no-reply@google.com Creating a filter: from:noreply-purchases@youtube.com from:noreply-purchases@youtube.com: Updating message 1 | status | reason | input.query | input.add_labels | input.delete_labels | result.id | result.criteria_from | result.criteria_to | result.criteria_subject | result.criteria_query | result.criteria_negated_query | |--------|--------|---------------------------------------------|------------------------------|---------------------|----------------------------------------|----------------------|--------------------|-------------------------|---------------------------------------------|-------------------------------| | 成功 | | from:families-noreply@google.com | services/google.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:families-noreply@google.com | | | 成功 | | from:googlecommunityteam-noreply@google.com | services/google.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:googlecommunityteam-noreply@google.com | | | 成功 | | from:no-reply@accounts.google.com | services/accounts.google.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:no-reply@accounts.google.com | | | 成功 | | from:no-reply@google.com | services/google.com | | xxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxx | | | | from:no-reply@google.com | | | 成功 | | from:noreply-purchases@youtube.com | services/youtube.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:noreply-purchases@youtube.com | | The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/filters.csv The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/filters.json The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/filters.xlsx The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/messages.csv The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/messages.json The report generated: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/messages.xlsx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I don’t usually have time to create filters in batches, so I’m hoping this will make my email processing a little more efficient.&lt;/p&gt; </content> </entry> <entry> <title>Gmailのフィルタを一括作成するCLI - watermint toolbox</title> <link href="https://watermint.org/2020/07/27/gmail-filter-cli/"/> <updated>2020-07-27T00:00:00+09:00</updated> <id>https://watermint.org/2020/07/27/gmail-filter-cli</id> <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;に新しくGmail関連のコマンドを追加しました。これにより、コマンドラインからメール一覧を取得したり、ラベルを追加・削除・名前変更したり、フィルタを追加・削除できるようになりました。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail label list watermint toolbox 72.4.544 ========================== © 2016-2020 Takayuki Okazaki オープンソースライセンスのもと配布されています. 詳細は`license`コマンドでご覧ください. ネットワーク接続をテストしています... 完了 認可URLを開きます: https://accounts.google.com/o/oauth2/auth?client_id=xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com&amp;amp;redirect_uri=http%3A%2F%2Flocalhost%3A7800%2Fconnect%2Fauth&amp;amp;response_type=code&amp;amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.labels&amp;amp;state=xxxxxxxx ENTERを押してブラウザ上で認証ページを開いてください | name | type | |------------------------------|--------| | CHAT | system | | SENT | system | | INBOX | system | | IMPORTANT | system | | TRASH | system | | DRAFT | system | | SPAM | system | | CATEGORY_FORUMS | system | | CATEGORY_UPDATES | system | | CATEGORY_PERSONAL | system | | CATEGORY_PROMOTIONS | system | | CATEGORY_SOCIAL | system | | STARRED | system | | UNREAD | system | | services/google.com | user | | services/accounts.google.com | user | | services/youtube.com | user | レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200727-072609.001/report/labels.csv レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200727-072609.001/report/labels.json レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200727-072609.001/report/labels.xlsx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;お試しになりたい場合は&lt;a href=&quot;https://github.com/watermint/toolbox/releases/tag/72.4.544&quot;&gt;Release 72以降&lt;/a&gt;をお使いください。&lt;/p&gt; &lt;p&gt;この&lt;a href=&quot;https://github.com/watermint/toolbox/blob/72.4.544/README_ja.md#google-gmail&quot;&gt;コマンド群&lt;/a&gt;はおもにメールの整理整頓用に整備したもので、今回早速このコマンドを使ってメールを整理してみました。&lt;/p&gt; &lt;p&gt;私は様々なメールを処理する中である程度送信元ごとにラベルをつけて管理しています。これも送信元の種別が増えてくるとなかなか手間を感じてくるもので、今回作成したコマンドで数えてみたところラベル数は343個すでにあるようです。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail label list -output json | jq 'select(.type == &quot;user&quot;) | .id ' | wc -l 343 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;同様に作成済みフィルタ数を調べてみたところ474個ありました。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail filter list -output json | wc -l 474 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;これまで数年かけてコツコツ手作業で作ってきましたが、流石にそろそろ面倒になってきたのでラベルやフィルタを一定の条件をもとに一括作成できるようにしました。今のところ、完全自動作成ではなく一度CSVデータファイルを作成した上での半自動化となっています。&lt;/p&gt; &lt;h2 id=&quot;作りたいラベルフィルタの元データを作る&quot;&gt;作りたいラベル・フィルタの元データを作る&lt;/h2&gt; &lt;p&gt;Gmailのラベルには2種類あります。(1) INBOXやSPAMなどGmailが自動的に付与するシステムラベル、(2) ユーザー定義のユーザーラベルです。今回はINBOXに入っているメール一覧を取得して、ユーザーラベルが付与されていないデータを取得します。今回はメールの宛先アドレスや送信元アドレスからラベル条件をつけていきます。&lt;/p&gt; &lt;p&gt;まずはメールデータを取得して送信元アドレスを取得し、ドメインごとにルールを作ることにしましょう。かなり省略してしまいましたが、メールデータをJSON形式で取得しjqコマンドで加工の上CSVとして出力しています。1列目がクエリ条件、2列目が追加するラベル、3列目が削除するラベルです。3列目は今回指定していませんが、たとえば自動的にアーカイブ処理したい場合はINBOXを削除すれば実現できます。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail message processed list -output json | jq -r 'select(.label_type_user | length ==0) | .from.address | [&quot;from:&quot;+., &quot;services/&quot;+capture(&quot;@(?&amp;lt;d&amp;gt;\\b([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}\\b)&quot;).d] | @csv' | sort -u &quot;from:families-noreply@google.com&quot;,&quot;services/google.com&quot; &quot;from:googlecommunityteam-noreply@google.com&quot;,&quot;services/google.com&quot; &quot;from:no-reply@accounts.google.com&quot;,&quot;services/accounts.google.com&quot; &quot;from:no-reply@google.com&quot;,&quot;services/google.com&quot; &quot;from:noreply-purchases@youtube.com&quot;,&quot;services/youtube.com&quot; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このデータをもとにフィルタを一括作成します。また、不足しているラベルは自動作成し、INBOX内のメッセージにもラベルを適用します。&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx services google mail filter batch add -add-label-if-not-exist -apply-to-inbox-messages -peer waterlandpier -file ~/filters.csv watermint toolbox 72.4.544 ========================== © 2016-2020 Takayuki Okazaki オープンソースライセンスのもと配布されています. 詳細は`license`コマンドでご覧ください. フィルタを作成しています: from:families-noreply@google.com from:families-noreply@google.com: メッセージ 1を更新しています。 from:families-noreply@google.com: メッセージ 2を更新しています。 フィルタを作成しています: from:googlecommunityteam-noreply@google.com from:googlecommunityteam-noreply@google.com: メッセージ 1を更新しています。 フィルタを作成しています: from:no-reply@accounts.google.com from:no-reply@accounts.google.com: メッセージ 1を更新しています。 from:no-reply@accounts.google.com: メッセージ 2を更新しています。 from:no-reply@accounts.google.com: メッセージ 3を更新しています。 from:no-reply@accounts.google.com: メッセージ 4を更新しています。 from:no-reply@accounts.google.com: メッセージ 5を更新しています。 from:no-reply@accounts.google.com: メッセージ 6を更新しています。 from:no-reply@accounts.google.com: メッセージ 7を更新しています。 フィルタを作成しています: from:no-reply@google.com フィルタを作成しています: from:noreply-purchases@youtube.com from:noreply-purchases@youtube.com: メッセージ 1を更新しています。 | status | reason | input.query | input.add_labels | input.delete_labels | result.id | result.criteria_from | result.criteria_to | result.criteria_subject | result.criteria_query | result.criteria_negated_query | |--------|--------|---------------------------------------------|------------------------------|---------------------|----------------------------------------|----------------------|--------------------|-------------------------|---------------------------------------------|-------------------------------| | 成功 | | from:families-noreply@google.com | services/google.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:families-noreply@google.com | | | 成功 | | from:googlecommunityteam-noreply@google.com | services/google.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:googlecommunityteam-noreply@google.com | | | 成功 | | from:no-reply@accounts.google.com | services/accounts.google.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:no-reply@accounts.google.com | | | 成功 | | from:no-reply@google.com | services/google.com | | xxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxx | | | | from:no-reply@google.com | | | 成功 | | from:noreply-purchases@youtube.com | services/youtube.com | | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | | | from:noreply-purchases@youtube.com | | レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/filters.csv レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/filters.json レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/filters.xlsx レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/messages.csv レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/messages.json レポートが作成されました: /xxxxx/xxxxxxxx/.toolbox/jobs/20200726-223228.001/report/messages.xlsx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;フィルタを一括作成したいようなときは大抵時間がないので、これで少しでもメール処理の効率が上がればと思っています。&lt;/p&gt; </content> </entry> <entry> <title>DeepLとOmegaTを試す</title> <link href="https://watermint.org/2020/07/26/deepl-and-omegat/"/> <updated>2020-07-26T00:00:00+09:00</updated> <id>https://watermint.org/2020/07/26/deepl-and-omegat</id> <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.deepl.com&quot;&gt;DeepL&lt;/a&gt;というAI翻訳の精度が高いと評判なので、翻訳メモリソフトウエア&lt;a href=&quot;https://omegat.org/&quot;&gt;OmegaT&lt;/a&gt;と組み合わせて試しています。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-26-omegat-deepl.png&quot; alt=&quot;OmegaT + DeepL&quot; /&gt;&lt;/p&gt; &lt;p&gt;DeepLでOmegaTのようなCATツールを使うためにはAdvanced以上のプランへの契約が必要となるようです。Advanced以上のプランに申し込むとAPIキーを取得できます。&lt;/p&gt; &lt;p&gt;OmegaTでは標準的にDeepLをサポートしているので設定の「Machine Translation」→「DeepL」にチェック→「Configure」からAPIキーを設定すれば完了です。あとはMachine Translationウインドウを固定して使っていきます。翻訳された結果をそのまま適用する場合にはCmd+M (macOSの場合)で一発変換されます。&lt;/p&gt; &lt;h1 id=&quot;実際に使ってみた印象&quot;&gt;実際に使ってみた印象&lt;/h1&gt; &lt;p&gt;評判通り良い点としては翻訳品質がかなり高い点が挙げられます。特に英語→日本語訳はほとんど修正せずとも読める文章に翻訳されます。日本語→英語訳については言語の特徴として主語が抜ける部分があり、主語が「We」で訳されるか「I」と訳されるかはその時々によります。&lt;/p&gt; &lt;p&gt;困ったところはタグの扱いがまだ苦手なようです。たとえばGo言語のテンプレートで使う &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{.Name}}&lt;/code&gt; のような表記について翻訳結果には開始の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{{&lt;/code&gt; が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{{&lt;/code&gt; と1文字増えたり、終了も&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}}}&lt;/code&gt; と増えたりするケースが見られました。 OmegaTのTag Processingに次のような正規表現で登録し &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\{\{\.(\w+)\}\}&lt;/code&gt;、正しく認識しているようですがこの辺りは改善を待つ格好となるでしょう。&lt;/p&gt; </content> </entry> <entry> <title>Go Programming Trial and Error - Developing a command line tool for Dropbox</title> <link href="https://watermint.org/2020/07/23/golang-4years-en/"/> <updated>2020-07-23T00:00:00+09:00</updated> <id>https://watermint.org/2020/07/23/golang-4years-en</id> <content type="html">&lt;p&gt;I started building my first Go program in early 2016. I introduced it &lt;a href=&quot;/2017/12/16/toolbox/&quot;&gt;once on the blog in late 2017&lt;/a&gt;. I’d like to introduce the differences from the time I introduced it, and also what I’ve tried and achieved with the Go language after about 4 years of practice, as a reminder. In this article, I’ll show you how I designed and implemented the language in the first part of this article.&lt;/p&gt; &lt;h1 id=&quot;watermint-toolbox&quot;&gt;watermint toolbox&lt;/h1&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-22-toolbox-demo.gif&quot; alt=&quot;watermint toolbox&quot; /&gt;&lt;/p&gt; &lt;p&gt;The project I spend the most time on in creating the Go program is a project called &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;. This is a tool that allows you to manage files, permissions, etc. in Dropbox and Dropbox Business from the command line. For example, if you want to list the group members on your team, you can run the following&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;watermint toolbox 71.4.504 ========================== © 2016-2020 Takayuki Okazaki Licensed under open source licenses. Use the `license` command for more detail. Testing network connection... Done Scanning: Developer Inc のメンバー全員 Scanning: Okinawa Scanning: Osaka Scanning: Tokyo group_name group_management_type access_type email status surname given_name xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 杉戸 宏幸 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxxx@xxxxxxxxx.xxx active 藤沢 由里子 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxxx@xxxxxxxxx.xxx active 江川 紗和 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 正木 博史 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxxxx@xxxxxxxxx.xxx invited xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active Dropbox Debugger xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 里咲 広瀬 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 関本 重信 The report generated: /Users/xxxxxxxx/.toolbox/jobs/20200723-101557.001/report/group_member.csv The report generated: /Users/xxxxxxxx/.toolbox/jobs/20200723-101557.001/report/group_member.json The report generated: /Users/xxxxxxxx/.toolbox/jobs/20200723-101557.001/report/group_member.xlsx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(People’s names are pseudonyms, some output results have been replaced.)&lt;/p&gt; &lt;p&gt;The result report is output to standard output and the details are saved to a file in CSV, xlsx or JSON format. You can select Markdown or JSON as the output format for the standard output, but if you select JSON, you can easily extract the group name and email address from the above mentioned output and convert them to CSV by using the jq command.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx group member list -output json | jq -r '[.group.group_name, .member.profile.email] | @csv' &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxxxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(Some of the output results have been replaced.)&lt;/p&gt; &lt;p&gt;It also implements more than 100 other commands such as file upload, list of shared links, add and remove members, and more. Please refer to the &lt;a href=&quot;https://github.com/watermint/toolbox/blob/master/README.md&quot;&gt;README&lt;/a&gt; for more details on what you can do.&lt;/p&gt; &lt;h1 id=&quot;requirements-and-constraints&quot;&gt;Requirements and constraints&lt;/h1&gt; &lt;p&gt;The purpose of this tool development is to improve operational efficiency and solve issues in using Dropbox Business and Dropbox.&lt;/p&gt; &lt;p&gt;Dropbox has released a script that solves a common issue in the repository called &lt;a href=&quot;https://github.com/dropbox/DropboxBusinessScripts&quot;&gt;DropboxBusinessScripts&lt;/a&gt;. On the other hand, this project is about being as easy to implement as possible to solve our goals, and in particular, not requiring additional libraries or configuration to use the tool, which was the main reason for choosing Go.&lt;/p&gt; &lt;p&gt;Since this program runs on a PC, its usage and messages should be easy to understand, and if a problem occurs, you should be able to find out the situation from a set of log files without having to ask for detailed information.&lt;/p&gt; &lt;p&gt;This project was a personal development project, there is mainly time resource constraints. There were times when I could develop a certain amount of code at a time, and other times when I didn’t write any code for several months. When I don’t write anything for a few months, the structure of the code disappears from my mind, so I had to suffer a lot of duplication and redoing.&lt;/p&gt; &lt;p&gt;The main requirements and constraints that I note from the above requirements and constraints are as follows. The reasons for each will be discussed below.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;distribution in a single binary (both executable and licensing point of view)&lt;/li&gt; &lt;li&gt;Log every process to increase traceability&lt;/li&gt; &lt;li&gt;Prioritize development productivity over CPU time&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;More recently, I have been paying attention to the following points as additional requirements&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Internationalization (Japanese and English)&lt;/li&gt; &lt;li&gt;To save time, documents are basically auto-generated&lt;/li&gt; &lt;li&gt;Do not overwhelm the disk with log files and intermediate files.&lt;/li&gt; &lt;li&gt;Memory consumption should generally be kept to under a few hundred MB.&lt;/li&gt; &lt;li&gt;Improved durability and optimized execution speed&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I will recall how this project has been walked through with the above requirements and constraints in mind.&lt;/p&gt; &lt;h1 id=&quot;selecting-sdks-for-apis&quot;&gt;Selecting SDKs for APIs&lt;/h1&gt; &lt;p&gt;At the time of writing, &lt;a href=&quot;https://watermint.github.io/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; has GitHub and Gmail related commands as well as Dropbox and Dropbox Business. These APIs are available as SDKs, so using these SDKs is more productive from the point of view of development productivity. I used to use SDKs in early stage of development, but I don’t use any SDKs including official and unofficial ones at this moment except OAuth2 implementation.&lt;/p&gt; &lt;p&gt;The SDK has both useful aspects and constraints. In particular, the constraints include the following&lt;/p&gt; &lt;ul&gt; &lt;li&gt;In many cases, the log output cannot be changed in granularity or output method due to proprietary implementation.&lt;/li&gt; &lt;li&gt;Error handling is blacked out&lt;/li&gt; &lt;li&gt;There is a time lag between API updates and SDK updates.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here’s a little more about each.&lt;/p&gt; &lt;h2 id=&quot;log&quot;&gt;Log&lt;/h2&gt; &lt;p&gt;This is not limited to the SDK, and it’s not limited to the Go language, but it’s quite difficult to unify the control to suppress the output or to get the trace log for debugging because each library logs to its own heart’s content. If you use the standard log library, you can switch the log output destination, but in the worst case, you can’t control the output by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt.Printf&lt;/code&gt;. So you can send a pull request, give up, or create your own library. This time, I made the REST API framework from SDK for the reasons mentioned later, so I decided to make it by myself.&lt;/p&gt; &lt;p&gt;For log processing I used &lt;a href=&quot;https://github.com/cihub/seelog&quot;&gt;seelog&lt;/a&gt; in the beginning, but now I use &lt;a href=&quot;https://github.com/uber-go/zap&quot;&gt;zap&lt;/a&gt; wrapped in my own library. I think the main reason was that we wanted to change the JSON to a JSON that was easy to process in.&lt;/p&gt; &lt;p&gt;Instead of using zap as it is, I wrapped it in my own library for additional processing such as log rotation, compression, etc., and also for insurance in case I have to switch to a different log library at another time. As you know, &lt;a href=&quot;https://github.com/watermint/toolbox/commit/3f845e75a8e83b299469454b3d83695ccd1b0b72&quot;&gt;it’s quite a hassle to switch log libraries&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;error-handling-is-black-boxed&quot;&gt;Error handling is black boxed&lt;/h2&gt; &lt;p&gt;In exception handling in languages with relatively strong types such as Java, classes are defined for each exception (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationException&lt;/code&gt; for authentication errors, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOException&lt;/code&gt; for network I/O problems, etc.) and the code that receives the exceptions handles them. You can determine and change the behavior.&lt;/p&gt; &lt;p&gt;You can define each error type in Go as well, but in some libraries, the entire process is rounded up into a string. This is probably more a cultural part of the library implementation than a language specification; some libraries throw everything as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RuntimeException&lt;/code&gt; in Java as well. However, as I have a long experience with Java, I feel that Go is more likely to suffer from this kind of problem.&lt;/p&gt; &lt;p&gt;For example, a case that still bothers me a bit is the &lt;a href=&quot;https://github.com/golang/oauth2&quot;&gt;golang/oauth2&lt;/a&gt; Pull Request, &lt;a href=&quot;https://github.com/golang/oauth2/pull/380&quot;&gt;errors: return all tokens fetch related errors as claimed in structured&lt;/a&gt;, where the errors are rounded to a string. Then it’s bit difficult to determine is the error retriable or not. Since this Pull Request seems to be neglected for more than a year, it’s quite difficult to decide whether to give up on Google’s implementation or to accept this as a specification and use it with a fixed version.&lt;/p&gt; &lt;p&gt;Other than this, I also experienced a black box error handling that made it look like a server error, even though it was a parameter error, and I wasted a lot of time trying to figure out what was going on. The accumulation of this wastage was a major driving force behind the plan to de-SDK.&lt;/p&gt; &lt;p&gt;Since the current &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; is implemented using my own REST API framework instead of using the SDK, all API requests and responses, except for those around OAuth2, are individually logged in JSON format, not to mention the trace log output during processing. For this reason, the reproducibility is high and it is possible to quickly determine whether the error is a parameter problem or a network problem.&lt;/p&gt; &lt;p&gt;Related commands have been added to improve productivity, for example, the API request and response of the last command executed can be output in JSON format. jq command makes it easy to extract the request with response code 409. Note that the token string is automatically replaced with &lt;secret&gt; for safety reasons.&lt;/secret&gt;&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx job log last -kind capture -quiet | jq { &quot;time&quot;: &quot;2020-07-23T11:34:58.820+0900&quot;, &quot;msg&quot;: &quot;&quot;, &quot;req&quot;: { &quot;method&quot;: &quot;POST&quot;, &quot;url&quot;: &quot;https://api.dropboxapi.com/2/team/get_info&quot;, &quot;headers&quot;: { &quot;Authorization&quot;: &quot;Bearer &amp;lt;secret&amp;gt;&quot;, &quot;User-Agent&quot;: &quot;watermint-toolbox/`dev`&quot; }, &quot;content_length&quot;: 0 }, &quot;res&quot;: { &quot;code&quot;: 200, &quot;proto&quot;: &quot;HTTP/2.0&quot;, &quot;body&quot;: &quot;{\&quot;name\&quot;: \&quot;xxxxxxxxx xxx\&quot;, \&quot;team_id\&quot;: \&quot;dbtid:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\&quot;, \&quot;num_licensed_users\&quot;: 10, \&quot;num_provisioned_users\&quot;: 8, \&quot;policies\&quot;: {\&quot;sharing\&quot;: {\&quot;shared_folder_member_policy\&quot;: {\&quot;.tag\&quot;: \&quot;anyone\&quot;}, \&quot;shared_folder_join_policy\&quot;: {\&quot;.tag\&quot;: \&quot;from_anyone\&quot;}, \&quot;shared_link_create_policy\&quot;: {\&quot;.tag\&quot;: \&quot;default_team_only\&quot;}}, \&quot;emm_state\&quot;: {\&quot;.tag\&quot;: \&quot;disabled\&quot;}, \&quot;office_addin\&quot;: {\&quot;.tag\&quot;: \&quot;disabled\&quot;}}}&quot;, &quot;headers&quot;: { &quot;Cache-Control&quot;: &quot;no-cache&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Date&quot;: &quot;Thu, 23 Jul 2020 02:34:58 GMT&quot;, &quot;Pragma&quot;: &quot;no-cache&quot;, &quot;Server&quot;: &quot;nginx&quot;, &quot;Vary&quot;: &quot;Accept-Encoding&quot;, &quot;X-Content-Type-Options&quot;: &quot;nosniff&quot;, &quot;X-Dropbox-Request-Id&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;X-Envoy-Upstream-Service-Time&quot;: &quot;77&quot;, &quot;X-Frame-Options&quot;: &quot;SAMEORIGIN&quot;, &quot;X-Server-Response-Time&quot;: &quot;71&quot; }, &quot;content_length&quot;: 400 }, &quot;latency&quot;: 384840087 } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(Some of the output results have been replaced.)&lt;/p&gt; &lt;p&gt;There is also a command that can be used to process this output and display the execution options with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; command. (Note: The latest release, 71.4.504 at the time of this writing, has a bug that prevents it from working. Please wait for release 72 or later.)&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx job log last -kind capture -quiet | tbx dev util curl watermint toolbox `dev` ======================= © 2016-2020 Takayuki Okazaki オープンソースライセンスのもと配布されています. 詳細は`license`コマンドでご覧ください. curl -D - -X POST https://api.dropboxapi.com/2/team/get_info \ --header &quot;Authorization: Bearer &amp;lt;secret&amp;gt;&quot; \ --header &quot;User-Agent: watermint-toolbox/`dev`&quot; \ --data &quot;&quot; HTTP/2 200 cache-control: no-cache content-type: application/json date: Thu, 23 Jul 2020 02:34:58 GMT pragma: no-cache server: nginx vary: Accept-Encoding x-content-type-options: nosniff x-dropbox-request-id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x-envoy-upstream-service-time: 77 x-frame-options: SAMEORIGIN x-server-response-time: 71 {&quot;name&quot;: &quot;xxxxxxxxx Inc&quot;, &quot;team_id&quot;: &quot;dbtid:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;num_licensed_users&quot;: 10, &quot;num_provisioned_users&quot;: 8, &quot;policies&quot;: {&quot;sharing&quot;: {&quot;shared_folder_member_policy&quot;: {&quot;.tag&quot;: &quot;anyone&quot;}, &quot;shared_folder_join_policy&quot;: {&quot;.tag&quot;: &quot;from_anyone&quot;}, &quot;shared_link_create_policy&quot;: {&quot;.tag&quot;: &quot;default_team_only&quot;}}, &quot;emm_state&quot;: {&quot;.tag&quot;: &quot;disabled&quot;}, &quot;office_addin&quot;: {&quot;.tag&quot;: &quot;disabled&quot;}}} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(Some of the output results have been replaced.)&lt;/p&gt; &lt;p&gt;The API logs are currently also used for automated testing. I can replay the old API logs for various business logic to ensure that the business logic has not been affected by refactoring of the framework. I also have a command to anonymize log information for the preparation of data for testing, to improve efficiency.&lt;/p&gt; &lt;h1 id=&quot;there-is-a-time-lag-between-api-updates-and-sdk-updates&quot;&gt;There is a time lag between API updates and SDK updates.&lt;/h1&gt; &lt;p&gt;When new APIs are added or parameters are added, it takes a certain amount of time for the SDK to keep up with those changes; in the case of the Dropbox API and the official SDK, the time lag is relatively short since the SDK is generated using the API’s DSL, called &lt;a href=&quot;https://github.com/dropbox/stone&quot;&gt;stone&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/dropbox/dropbox-sdk-go-unofficial&quot;&gt;SDK for Go&lt;/a&gt; is positioned as unofficial, at the time of writing there are eight months’ worth of differences between the latest API and the one in use.&lt;/p&gt; &lt;p&gt;Whether or not to allow for this difference depends on your requirements, but in the &lt;a href=&quot;https://watermint.github.io/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;, I decided not to use the SDK because we wanted to try out the latest APIs easily.&lt;/p&gt; &lt;p&gt;One of the big advantages of using the SDK is that you don’t have to do the data structure definition yourself. As I’ve felt in the past when I was building tools to call REST APIs in Java and Scala, without using the SDK, most of the code was for defining data structures and mapping them to our own domain model. While the implementation work is monotonous and not very fun, I try to avoid this mapping work as much as possible because if I get it wrong, I get stuck in it. Again, in reinventing the REST API framework, I tried to keep the data structure definition to a minimum.&lt;/p&gt; &lt;p&gt;The following structure is designed to handle shared link data in the Dropbox API, but we decided to define only the minimum number of fields necessary to handle it in this tool.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Raw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;id&quot; json:&quot;id&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;\\.tag&quot; json:&quot;tag&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;url&quot; json:&quot;url&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;name&quot; json:&quot;name&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expires&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;expires&quot; json:&quot;expires&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathLower&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;path_lower&quot; json:&quot;path_lower&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visibility&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;link_permissions.resolved_visibility.\\.tag&quot; json:&quot;visibility&quot;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The first defined raw is the raw data returned by the API, and the following fields, such as Id and Tag, are automatically retrieved from path information in JSON, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path:&quot;id&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path:&quot;\\.tag&quot;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Fields are defined in this way for items of high interest to users, such as shared link names, URLs, expiration dates, etc., that you want to output as reports, and other information is handled as JSON data only. Reports are output in three formats: CSV, xlsx, and JSON, but only these defined fields are output to CSV/xlsx. If you need information not included here, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; command to extract it from the JSON output.&lt;/p&gt; &lt;p&gt;In order to easily retrieve only the information necessary for business purposes, it is sufficient to refer to CSV and xlsx format reports, and the data necessary for automation, such as id information, can be retrieved from the JSON format. By using these loose data structure definitions, the program can be used with almost no impact when fields are added to the API.&lt;/p&gt; &lt;h1 id=&quot;addressing-requirements-and-constraints&quot;&gt;Addressing requirements and constraints&lt;/h1&gt; &lt;p&gt;We will now look back again at how we have addressed the requirements and constraints mentioned above.&lt;/p&gt; &lt;h2 id=&quot;single-binary-distribution&quot;&gt;Single binary distribution&lt;/h2&gt; &lt;p&gt;Being able to distribute a tool as a single binary is a very important theme for such a tool. If it is a tool that runs on my own PC or server, I can relax the library and OS requirements to some extent, but it is very important to support a wide range of OSs because it is a tool that runs on various users’ environments. The mechanism of single binary distribution is not limited to the Go language, but I think that the library group and the richness of the IDE have the advantage of being a certain pioneer in this field.&lt;/p&gt; &lt;p&gt;Although the &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; is licensed under the MIT license, it is linked with libraries under various other licenses. When selecting libraries, we mainly select the compatible BSD and Apache v2 licenses, and take care not to mix GPL licenses.&lt;/p&gt; &lt;h2 id=&quot;log-every-process-to-increase-traceability&quot;&gt;Log every process to increase traceability&lt;/h2&gt; &lt;p&gt;Problems that occur in a user’s environment are often difficult to reproduce in my own environment, partly because of differences in the PC environment, and partly because of differences in the configuration, environment and size of the Dropbox or Dropbox Business where the API is used. For this reason, the logs are all output in the trace level. The log size is quite inflated, but I allow for the log size because priority to the time. Also, as described later, I’m currently using compression and log rotation to prevent the logs from overwhelming the disk.&lt;/p&gt; &lt;p&gt;Also, to make it easier to analyze the logs, the current version outputs all logs in JSON format (more precisely, &lt;a href=&quot;http://jsonlines.org/&quot;&gt;JSON Lines&lt;/a&gt; format), to make it easier to extract errors and memory usage statistics by combining commands such as grep and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, by logging the last command executed and processing the results with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;, you can get time by time heap usage statistics, as shown below. Such statistics can be useful in identifying the cause of the problem, since detailed data, such as memory profilers, are difficult to obtain in the user environment.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx job log last -kind toolbox -quiet | jq -r 'select(.caller == &quot;es_memory/stats.go:33&quot;) | [.time, .HeapAlloc] | @csv' &quot;2020-07-23T12:34:08.549+0900&quot;,104991184 &quot;2020-07-23T12:34:13.548+0900&quot;,105058744 &quot;2020-07-23T12:34:18.550+0900&quot;,111987752 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;prioritize-development-productivity-over-cpu-time&quot;&gt;Prioritize development productivity over CPU time&lt;/h2&gt; &lt;p&gt;The &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; is a program that mainly makes API calls, processes the results and outputs them. The execution time ratio is relatively high in API processing wait time, and the ratio of CPU time is not high and can be almost negligible. Therefore, the programming style has changed in the last four years to be in line with it.&lt;/p&gt; &lt;p&gt;The biggest change is that I’ve been using Scala for a while now, and I’ve been trying to make my implementation functional and immutable. I’ve already failed to some extent in this endeavor, but I’ll talk about that later, but let’s start with the details.&lt;/p&gt; &lt;p&gt;I don’t remember where I read it, but I think it said that the idea of Go is that we should not hide the complexity of the process in functions and so on. For example, when I need to sum the fields of some structure, my experience is that I usually think of cutting them out as functions to make them easier to reuse and test. Well, it’s not that hard to do.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This works and there is no problem at all, but the above claim is that when you call TotalSize(), that does not tell whether it’s O(N) or O(N2) processing, but the caller can’t understand how much processing order is hidden behind it, so you should inline this kind of simple processing I think the argument was something like this. I think it was a superstition in the early days of my introduction to Go. It may be a superstition that I made a mistake at the beginning of my introduction to Go.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyBizLogic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Total&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Total&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Naturally, the code would be less readable, and productivity was significantly reduced due to mistyping and lack of test coverage. If you really wanted to care about processing order, it would be much more effective to name your functions with Hungarian naming, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ONLOGNTotal()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ON2Total()&lt;/code&gt;. I was completely superstitious.&lt;/p&gt; &lt;p&gt;Now that I understand myself that this is a superstition (it took me a couple of years to do so…), it’s only natural that you’d want to do the same array and hash operations that you’ve always done in Scala or Ruby. It’s natural to want to do the same kind of array and hash operations that you normally do in Scala or Ruby.&lt;/p&gt; &lt;p&gt;I looked at some existing libraries and decided to use &lt;a href=&quot;https://github.com/thoas/go-funk&quot;&gt;go-funk&lt;/a&gt; as a reference. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-funk&lt;/code&gt; makes full use of reflection to improve readability and productivity. As you can see in the &lt;a href=&quot;https://github.com/thoas/go-funk#performance&quot;&gt;Performance&lt;/a&gt; section of the project introduction, they don’t prepare functions for each type like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContainsInt()&lt;/code&gt; does.&lt;/p&gt; &lt;p&gt;I thought about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-funk&lt;/code&gt;, but I decided to make my own to practice the Go language. The result is a library that looks like &lt;a href=&quot;https://github.com/watermint/toolbox/tree/71.4.504/essentials/collections&quot;&gt;this&lt;/a&gt;. For example, you can define arrays &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, and then extract the common elements.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -&amp;gt; [2, 3]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I thought I could make a library that is somewhat immutable and functional, but as I mentioned above “This attempt has already failed to some extent”, I ran into a wall in the language specification. The problem is the type information.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ... Getting folder1Files and folder2Files&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Convert from array to array interface for use in the library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder1Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder2Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Extract the files common to folder1 and folder2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder2List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now, this works to a certain extent, but the problem is that each time we deal with the resulting elements, we need to cast them.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;commonFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Processing the element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Well, I’d say it’s not a problem, but while using the library makes it more efficient to some extent, it also increases the chance of a type exception at runtime, which is easy to solve in languages with strong types or type variables like Java and Scala, but difficult to solve in languages with weak types like Go. I guess.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort.Strings()&lt;/code&gt; in the standard library, passing an array for each type will reduce type-related errors. On the other hand, this will only work if the number of elements in the array remains the same, and it won’t work if you want to extract common elements from the two arrays or join the two arrays as described above.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; Soba&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Udon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ramen&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// The array size doesn't change before and after processing&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;For now, I’m thinking about using this library in my entire project while covering the problems with unit tests, but if I come up with another good idea, I’d love to incorporate it into my work.&lt;/p&gt; &lt;h2 id=&quot;internationalization&quot;&gt;Internationalization&lt;/h2&gt; &lt;p&gt;The &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; has been used in many countries, including Japanese users. Initially, the toolbox was only available in English, but since last year, we have been able to provide a Japanese language version.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-22-omegat.png&quot; alt=&quot;OmegaT&quot; /&gt;&lt;/p&gt; &lt;p&gt;The translation memory software is &lt;a href=&quot;https://omegat.org/&quot;&gt;OmegaT&lt;/a&gt;, with a plugin for the JSON data format.&lt;/p&gt; &lt;p&gt;There are a lot of libraries for internationalization, but I created them myself without thinking too much about it; I stored the message keys and translation text in JSON and switched the messages for display according to the language.&lt;/p&gt; &lt;p&gt;Now that I think about it, it may have been good to use &lt;a href=&quot;https://github.com/nicksnyder/go-i18n/&quot;&gt;go-i18n&lt;/a&gt;. go-i18n seems to use CLDR, and it seems to be able to handle differences of each language such as plural forms more finely. It may be worth trying to switch libraries at some point. Fortunately, I don’t think the switching cost is not so high because I don’t have deep implementation about internationalization.&lt;/p&gt; &lt;h2 id=&quot;to-save-time-documents-are-basically-auto-generated&quot;&gt;To save time, documents are basically auto-generated&lt;/h2&gt; &lt;p&gt;The most troublesome part of a personal project is the creation of the documentation. It takes a lot of time to create documents at the beginning, but it also takes some time to maintain them when the specifications change.&lt;/p&gt; &lt;p&gt;For this reason, the &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; automatically generates as much documentation as possible, including manuals. Although some explanations are missing, the ability to update the documentation in a comprehensive manner is a great advantage. It is not difficult to prepare manuals in the same format for multiple languages, as long as you have translated text.&lt;/p&gt; &lt;p&gt;However, automatic generation required several steps to be taken. Treating command specifications as programmatic data, extracting messages from the source code, detecting and reporting missing messages, &lt;a href=&quot;https://github.com/watermint/toolbox/blob/71.4.504/doc/generated/changes.md&quot;&gt;generating update diffs for release notes&lt;/a&gt;, incorporating checks into the release process, and so on, I now have the ability to generate some readable manuals automatically.&lt;/p&gt; &lt;p&gt;The fact that command specifications can now be handled as data has been a nice side effect. Command specifications are stored in JSON format for each release, and this JSON makes it easier to extract, for example, a list of commands that take a CSV file as an argument.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% gzcat doc/generated/spec.json.gz | jq -r '.[] | select(.feeds | length &amp;gt; 0) | .path' file dispatch local file import batch url group batch delete member clear externalid member delete member detach member invite member quota update member replication member update email member update externalid member update profile team activity batch user team device unlink team filerequest clone teamfolder batch archive teamfolder batch permdelete teamfolder batch replication &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;dont-overwhelm-the-disk-with-log-files-and-intermediate-files&quot;&gt;Don’t overwhelm the disk with log files and intermediate files.&lt;/h2&gt; &lt;p&gt;In order to improve the efficiency of the debugging process, I spent a relatively large amount of time on the log output part. On the other hand, operations on large folders and teams took longer to execute and the log sizes were not negligible. Sometimes exceeding 100 GB. For this reason, recent releases incorporate a mechanism to gzip the logs and divide them into smaller chunks, deleting the old logs when they exceed a certain size.&lt;/p&gt; &lt;p&gt;Also, if it deletes the logs in order from the oldest, important data such as startup parameters may be lost, so I had to devise a way to output those data to a different log.&lt;/p&gt; &lt;p&gt;Implementing the log compression and rotation process itself was not too difficult, but I spent a lot of time trying to improve stability on Windows. This is due to deadlocks in a multi-threaded environment. There were several issues, including deadlocking of mutexes and waiting for I/O processing that still deadlocked. The frequency of reoccurrence was about once every hour to a few hours, so fixing and confirming the fix was quite a challenge.&lt;/p&gt; &lt;p&gt;I don’t think the code is durable enough for all conditions, but I believe the probable deadlock is mostly resolved. In addition, the deadlock was generally reproduced in the following code when connecting to the debugger.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogWriter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Indeed, it’s possible that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Write()&lt;/code&gt; itself could be deadlocked if it’s locked from the OS in some way. I haven’t researched the spec in detail, but that’s probably because I/O locking is more strict on Windows.&lt;/p&gt; &lt;p&gt;What you can see from the black box test is that when you select any text on a console, such as PowerShell, the scrolling locks and the standard output stops. On macOS and Linux, such a lock does not occur. I would like to investigate this issue in more detail if a similar issue occurs again.&lt;/p&gt; &lt;h2 id=&quot;memory-consumption-should-be-generally-kept-to-a-few-hundred-mb&quot;&gt;Memory consumption should be generally kept to a few hundred MB.&lt;/h2&gt; &lt;p&gt;If you use an external library, the memory consumption may be higher than expected. We have a solution for some of the libraries that use a lot of memory. I’ll introduce some concrete examples.&lt;/p&gt; &lt;p&gt;In addition to CSV and JSON, the &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; also provides the xlsx file format, which is used by Excel and others.&lt;/p&gt; &lt;p&gt;The CSV is enough for most cases, but if you try to read CSV with Japanese characters (UTF-8 encoding, no BOM) in Excel, Excel will not recognize the encoding correctly and the characters will be broken. You can add a BOM to the CSV side, but it will not be easy to use in programs that expect no-BOM. For this reason, I also support xlsx format output to avoid garbled characters in casual use.&lt;/p&gt; &lt;p&gt;Now the xlsx format is one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot;&gt;Office Open XML&lt;/a&gt;, now standardized as ISO/IEC 29500. xlsx files are a collection of zipped files, and the files that contain the main data are made in the XML format.&lt;/p&gt; &lt;p&gt;Representing the spreadsheet in XML means that the entire spreadsheet needs to be expanded in memory once as a DOM or other XML tree. As the size of the spreadsheet grows, it uses proportionally more memory. Therefore, if you try to output the report in XML format, it will eat up the memory space proportionally according to the number of rows in the report. In some cases, this can cause an out of memory error and stop the process. As a countermeasure, the xlsx report is divided into separate files when the number of lines exceeds a certain number.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-22-memory-consumption.png&quot; alt=&quot;Trends in memory usage&quot; /&gt;&lt;/p&gt; &lt;p&gt;In addition to this, I also tuned the KVS, &lt;a href=&quot;https://github.com/dgraph-io/badger&quot;&gt;Badger&lt;/a&gt;. It use memory for caching, based on the number of data items. Again, the method of obtaining memory statistics from the log files was useful for long-term measurements with different parameters. The figure above shows the memory consumption trend for the two parameter settings.&lt;/p&gt; &lt;h2 id=&quot;improved-durability-and-optimized-execution-speed&quot;&gt;Improved durability and optimized execution speed&lt;/h2&gt; &lt;p&gt;Durability and execution speed are areas where there is still room for growth. In terms of fault tolerance, I have already implemented automatic retries when calling APIs, but I believe that there is room for improvement in error handling for the framework as a whole.&lt;/p&gt; &lt;p&gt;The &lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt; consists of commands, which are the core of the business logic, and the framework part that supports it. In most cases, the business logic part of the toolbox does not process errors returned by the API, and therefore, when an error occurs, it is returned to the upper framework.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Peer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// return an error to the upper framework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ... Subsequent processing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Network IO errors are handled by the REST API framework, and this is not a problem. But when retrieving a file list from a folder, is it necessary for the business logic that a different process is performed if the file does not exist, or is it an authentication error. I don’t know if this is an error or not, and I think it’s a bad idea to write the logic in various places.&lt;/p&gt; &lt;p&gt;Eventually I may settle again on the current form, but I may create a mechanism to explicitly separate what is handled by the framework from what is handled by the business logic, as there are attempts to implement &lt;a href=&quot;https://github.com/mattn/go-try&quot;&gt;try types&lt;/a&gt;, or to return on errors or to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;panic()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;There is still a lot of room for improvement in optimizing the execution speed. The current commands are programmed to be executed in multi-threads if they can be distributed to some extent, such as file uploads, folder permissions, etc. I don’t have to worry too much about it because the Go language has an environment for parallel processing such as goroutine and channels. I like the fact that it can be implemented.&lt;/p&gt; &lt;p&gt;On the other hand, if the execution time is longer than a few days, the overhead to reach the restart point becomes large, the intermediate file becomes bloated, and the progress is difficult to see. Therefore, it is time to consider introducing a processing framework that uses persistent asynchronous queues.&lt;/p&gt; &lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt; &lt;p&gt;I have incorporated some of the development processes myself, such as the release process, as part of the tools, and our development efficiency is much better than it was four years ago. On the other hand, the Go language and the ecosystem surrounding it has allowed me to add unexpectedly advanced features to our specifications with ease. In the early days of development, Java, Scala, and Ruby were more experienced, so it was a bit of a struggle, but finally I’m starting to get the feeling that I can do most of the implementation in Go.&lt;/p&gt; &lt;p&gt;When I come up with an interesting implementation or a good library, I’d like to introduce it again.&lt;/p&gt; </content> </entry> </feed>