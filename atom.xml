<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"> <title>watermint.org</title> <link href="https://watermint.org/atom.xml" rel="self"/> <link href="https://watermint.org/"/> <updated>2020-07-23T03:50:12-05:00</updated> <id>https://watermint.org</id> <author> <name>Takayuki Okazaki</name> <uri>https://twitter.com/watermint</uri> </author> <rights>(c) 2005-2020 Takayuki Okazaki</rights> <entry> <title>Goプログラミング試行錯誤 - Dropbox向けコマンドラインツールの開発</title> <link href="https://watermint.org/2020/07/22/golang-4years/"/> <updated>2020-07-22T00:00:00-05:00</updated> <id>https://watermint.org/2020/07/22/golang-4years</id> <content type="html">&lt;p&gt;初めてのGoプログラムを作り始めたのが2016年初旬。&lt;a href=&quot;/2017/12/16/toolbox/&quot;&gt;ブログでも2017年末に一度紹介しています&lt;/a&gt;。紹介した頃からの差分と、4年ほど実践してみたところでのGoという言語について試したこと、実現してきたことを備忘録がてら紹介します。紹介の前段としてどのような前提・要件をもとに設計・実装したか紹介していきます。&lt;/p&gt; &lt;h1 id=&quot;watermint-toolbox&quot;&gt;watermint toolbox&lt;/h1&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-22-toolbox-demo.gif&quot; alt=&quot;watermint toolbox&quot; /&gt;&lt;/p&gt; &lt;p&gt;Goプログラムを作る中で最も時間をかけているのが&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;というプロジェクトです。これは、コマンドラインからDropboxやDropbox Businessのファイルや権限などを管理するためのツールです。たとえば、チーム内のグループメンバーを一覧したい場合には次のように実行します。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./tbx group member list watermint toolbox 71.4.504 ========================== © 2016-2020 Takayuki Okazaki オープンソースライセンスのもと配布されています. 詳細は`license`コマンドでご覧ください. 情報を取得中: Tokyo 情報を取得中: xxxxxxxxx Inc のメンバー全員 情報を取得中: Okinawa 情報を取得中: Osaka group_name group_management_type access_type email status surname given_name xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 杉戸 宏幸 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxxx@xxxxxxxxx.xxx active 藤沢 由里子 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxxx@xxxxxxxxx.xxx active 江川 紗和 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 正木 博史 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxxxx@xxxxxxxxx.xxx invited xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active Dropbox Debugger xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 里咲 広瀬 xxxxxxxxx Inc のメンバー全員 system_managed member xxx.xxx@xxxxxxxxx.xxx active 関本 重信 レポートが作成されました: /Users/xxxxxxxx/.toolbox/jobs/20200723-101557.001/report/group_member.csv レポートが作成されました: /Users/xxxxxxxx/.toolbox/jobs/20200723-101557.001/report/group_member.json レポートが作成されました: /Users/xxxxxxxx/.toolbox/jobs/20200723-101557.001/report/group_member.xlsx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(人名は仮名です、一部出力結果は置換しています)&lt;/p&gt; &lt;p&gt;結果レポートは標準出力に出力されるほか、詳細はCSV、xlsx、JSON形式でファイルに保存されます。標準出力への出力形式はMarkdownやJSONも選択できます。JSONを選択すれば&lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;コマンドなどと組み合わせて、前掲の出力からグループ名とメールアドレスだけを抽出してCSVに変換するといった操作も簡単です。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx group member list -output json | jq -r '[.group.group_name, .member.profile.email] | @csv' &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxxxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &quot;xxxxxxxxx xxx のメンバー全員&quot;,&quot;xxx+xxx@xxxxxxxxx.xxx&quot; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(一部出力結果は置換しています)&lt;/p&gt; &lt;p&gt;このほかにもファイルのアップロードや共有リンクの一覧、メンバーの追加・削除など100以上のコマンドを実装しています。どんなことができるか詳細は&lt;a href=&quot;https://github.com/watermint/toolbox/blob/master/README_ja.md&quot;&gt;README&lt;/a&gt;をご参照ください。&lt;/p&gt; &lt;h1 id=&quot;要件や制約&quot;&gt;要件や制約&lt;/h1&gt; &lt;p&gt;このツール開発ではDropbox BusinessやDropboxを利用する上での実運用での効率化や課題解決を目的としています。&lt;/p&gt; &lt;p&gt;Dropboxからは&lt;a href=&quot;https://github.com/dropbox/DropboxBusinessScripts&quot;&gt;DropboxBusinessScripts&lt;/a&gt;というレポジトリでよく利用される課題を解消するスクリプトが公開されています。一方このプロジェクトでは、目的を解決するためになるべく簡単に実施できること、特にこのツールを使うにあたって追加のライブラリや環境設定を必要としないことをプロジェクトの意義としています。Goを選択した理由もまさにこの要件が最大の要因でした。&lt;/p&gt; &lt;p&gt;このプログラムはPC上で動作させますので、使い方やメッセージがわかりやすく、また不具合が発生した時には事細かに状況を聞かなくともログファイル一式から状況がわかるような仕組みも必要です。&lt;/p&gt; &lt;p&gt;このプロジェクトは個人的な開発で、主に時間的リソースの制約があります。ある程度まとめて開発できる時期もあれば、数ヶ月なにもコードを書かない時期もありました。数ヶ月何も書かないとコードの構成もさっぱりと頭から消えてしまうので、たくさんの重複実装とやり直し作業に苦しめられました。&lt;/p&gt; &lt;p&gt;以上の要件や制約から注意している主な要件・制約は次の通りになります。それぞれ理由は後述していきます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;シングルバイナリで配布できること (動作上もライセンス上も)&lt;/li&gt; &lt;li&gt;あらゆる処理をログに取得してトレーサビリティーを高める&lt;/li&gt; &lt;li&gt;CPU時間よりも開発生産性を優先する&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;最近ではさらに追加要件として次のようなポイントにも気を配っています。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;国際化対応 (日本語と英語)&lt;/li&gt; &lt;li&gt;時短のためにドキュメントは基本的に自動生成&lt;/li&gt; &lt;li&gt;ログファイルや中間ファイルでディスクを圧迫しすぎないこと&lt;/li&gt; &lt;li&gt;メモリの消費を概ね数百MB程度に抑えること&lt;/li&gt; &lt;li&gt;耐障害性の向上と、実行速度の最適化&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;以上の要件・制約を前提としてどのようにこのプロジェクトが歩んできたかを思い出していきます。&lt;/p&gt; &lt;h1 id=&quot;apiとsdkの選定&quot;&gt;APIとSDKの選定&lt;/h1&gt; &lt;p&gt;&lt;a href=&quot;https://watermint.github.io/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;では執筆時点でDropbox・Dropbox Business以外にもGitHubとGmail関連コマンドが実装されています。これらのAPIについてはそれぞれSDKが提供されていますのでこれを使うのが開発生産性の観点では有利です。開発初期にはSDKを使って開発をしていましたが、現時点ではOAuth2実装を除き公式・非公式含むSDKを利用していません。&lt;/p&gt; &lt;p&gt;SDKは便利な側面と、制約事項を併せ持っています。とくに制約事項には次のようなものがあります。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;ログ出力が独自実装で粒度や出力方法を変更できない場合が多い&lt;/li&gt; &lt;li&gt;エラー処理がブラックボックス化されている&lt;/li&gt; &lt;li&gt;APIの更新とSDKの更新では時差がある&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;それぞれ少し詳しく紹介します。&lt;/p&gt; &lt;h2 id=&quot;ログ出力が独自実装で粒度や出力方法を変更できない場合が多い&quot;&gt;ログ出力が独自実装で粒度や出力方法を変更できない場合が多い&lt;/h2&gt; &lt;p&gt;これはSDKだけに限りませんし、Go言語だけに限った話ではありませんが各ライブラリが思い思いにログ出力するため出力抑制あるいはデバッグのためのトレースログ取得といった制御の統一はかなり難しいところがあります。標準ログライブラリを使っていれば出力先を切り替えるなどできますが、酷い場合には&lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Printf&lt;/code&gt;でログ出力しているなど制御が効かないケースもあります。このため地道にPull requestを送るか、諦めるか、あるいは自分でライブラリを作るかどれかの選択肢になります。今回は後述の理由などからSDKから自身でREST APIフレームワークを作りましたので、自身で作ることにしました。&lt;/p&gt; &lt;p&gt;ログ処理については最初の頃&lt;a href=&quot;https://github.com/cihub/seelog&quot;&gt;seelog&lt;/a&gt;を使っていましたが、いまでは&lt;a href=&quot;https://github.com/uber-go/zap&quot;&gt;zap&lt;/a&gt;をさらに自身のライブラリでラップしたものを使っています。seelogからの乗り換え理由はあまり記憶が定かではありませんが、seelogでは設定のためにXMLが必要であったり、出力形式をjqで処理しやすいJSONに変更したかったのが大きな理由だったと思います。&lt;/p&gt; &lt;p&gt;zapをそのまま使うのではなく、わざわざさらに自身のライブラリでラップしたのはログローテーション、圧縮など追加処理のためと、またもし別の機会に違うログライブラリに乗り換えるケースが生じた場合への保険のためです。ご承知の通り&lt;a href=&quot;https://github.com/watermint/toolbox/commit/3f845e75a8e83b299469454b3d83695ccd1b0b72&quot;&gt;ログライブラリの入れ替え&lt;/a&gt;はかなり面倒ですから。。&lt;/p&gt; &lt;h2 id=&quot;エラー処理がブラックボックス化されている&quot;&gt;エラー処理がブラックボックス化されている&lt;/h2&gt; &lt;p&gt;Javaのように比較的強い型をもつ言語の例外処理では認証エラーならたとえばAuthenticationException、ネットワークI/O処理の問題であればIOExceptionといったように例外ごとにクラスが定義されそれぞれ例外を受け取ったコードが処理を判定し、振る舞いを変更できます。&lt;/p&gt; &lt;p&gt;Goでも同様にエラー種別ごとに定義はできますが、ライブラリによっては全ての処理を文字列として丸め込んでしまうケースがあります。これは言語仕様というよりはライブラリ実装上の文化的な部分が大きいでしょう。Javaでも同じようになんでもExceptionやRuntimeExceptionとしてスローするようなライブラリもあります。ただ、この辺の当たり外れというと失礼ですが苦しめられるケースはJava経験がそれなりに長い身としてはGoのほうが多いように感じます。&lt;/p&gt; &lt;p&gt;たとえば、今も少し悩んでいるケースとしては&lt;a href=&quot;https://github.com/golang/oauth2&quot;&gt;golang/oauth2&lt;/a&gt;のPull Request、&lt;a href=&quot;https://github.com/golang/oauth2/pull/380&quot;&gt;errors: return all token fetch related errors as structured&lt;/a&gt;で主張されている通り、エラーが文字列に丸められ、エラーがリトライ可能なものかどうか呼び出し側で判断できないというものがあります。1年以上このPull Requestも放置されているようなので、ここでGoogleの実装に見切りをつけるか、ある意味これを仕様として受け止めバージョンを固定した上で利用するかはかなり悩ましい部分です。&lt;/p&gt; &lt;p&gt;これ以外にも、エラー処理がブラックボックス化されていることによって、パラメータの間違いなのにサーバエラーのように見えてしまって原因究明にかなりの時間を浪費した経験もあります。この浪費の蓄積は脱SDKを計画する大きな原動力となりました。&lt;/p&gt; &lt;p&gt;現在の&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;ではSDKを使わず独自のREST APIフレームワークを使って実装しているので、処理中のトレースログ出力はもちろんのこと、OAuth2周りをのぞくすべてのAPIリクエスト・レスポンスを個別にJSON形式のログに残しています。このため、再現性も高くエラーがパラメータの問題なのか、ネットワークの問題なのかすぐに判定できるようになりました。&lt;/p&gt; &lt;p&gt;これに関連するコマンドも生産性向上のために追加してありたとえば、次のように最後に実行したコマンドのAPIリクエスト・レスポンスをJSON形式で出力できます。jqコマンドを使えばレスポンスコード409のリクエストだけ抽出するといった操作も簡単です。なお、トークン文字列は安全のために自動的に &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;secret&amp;gt;&lt;/code&gt; と置換されます。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx job log last -kind capture -quiet | jq { &quot;time&quot;: &quot;2020-07-23T11:34:58.820+0900&quot;, &quot;msg&quot;: &quot;&quot;, &quot;req&quot;: { &quot;method&quot;: &quot;POST&quot;, &quot;url&quot;: &quot;https://api.dropboxapi.com/2/team/get_info&quot;, &quot;headers&quot;: { &quot;Authorization&quot;: &quot;Bearer &amp;lt;secret&amp;gt;&quot;, &quot;User-Agent&quot;: &quot;watermint-toolbox/`dev`&quot; }, &quot;content_length&quot;: 0 }, &quot;res&quot;: { &quot;code&quot;: 200, &quot;proto&quot;: &quot;HTTP/2.0&quot;, &quot;body&quot;: &quot;{\&quot;name\&quot;: \&quot;xxxxxxxxx xxx\&quot;, \&quot;team_id\&quot;: \&quot;dbtid:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\&quot;, \&quot;num_licensed_users\&quot;: 10, \&quot;num_provisioned_users\&quot;: 8, \&quot;policies\&quot;: {\&quot;sharing\&quot;: {\&quot;shared_folder_member_policy\&quot;: {\&quot;.tag\&quot;: \&quot;anyone\&quot;}, \&quot;shared_folder_join_policy\&quot;: {\&quot;.tag\&quot;: \&quot;from_anyone\&quot;}, \&quot;shared_link_create_policy\&quot;: {\&quot;.tag\&quot;: \&quot;default_team_only\&quot;}}, \&quot;emm_state\&quot;: {\&quot;.tag\&quot;: \&quot;disabled\&quot;}, \&quot;office_addin\&quot;: {\&quot;.tag\&quot;: \&quot;disabled\&quot;}}}&quot;, &quot;headers&quot;: { &quot;Cache-Control&quot;: &quot;no-cache&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Date&quot;: &quot;Thu, 23 Jul 2020 02:34:58 GMT&quot;, &quot;Pragma&quot;: &quot;no-cache&quot;, &quot;Server&quot;: &quot;nginx&quot;, &quot;Vary&quot;: &quot;Accept-Encoding&quot;, &quot;X-Content-Type-Options&quot;: &quot;nosniff&quot;, &quot;X-Dropbox-Request-Id&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;X-Envoy-Upstream-Service-Time&quot;: &quot;77&quot;, &quot;X-Frame-Options&quot;: &quot;SAMEORIGIN&quot;, &quot;X-Server-Response-Time&quot;: &quot;71&quot; }, &quot;content_length&quot;: 400 }, &quot;latency&quot;: 384840087 } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(一部出力結果は置換しています)&lt;/p&gt; &lt;p&gt;また、この出力を加工して &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; コマンドで実行オプションを表示するコマンドもあります。(注: 執筆時点の最新リリース71.4.504にはバグがありうまく動作しません。リリース72以降をお待ちください)&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx job log last -kind capture -quiet | tbx dev util curl watermint toolbox `dev` ======================= © 2016-2020 Takayuki Okazaki オープンソースライセンスのもと配布されています. 詳細は`license`コマンドでご覧ください. curl -D - -X POST https://api.dropboxapi.com/2/team/get_info \ --header &quot;Authorization: Bearer &amp;lt;secret&amp;gt;&quot; \ --header &quot;User-Agent: watermint-toolbox/`dev`&quot; \ --data &quot;&quot; HTTP/2 200 cache-control: no-cache content-type: application/json date: Thu, 23 Jul 2020 02:34:58 GMT pragma: no-cache server: nginx vary: Accept-Encoding x-content-type-options: nosniff x-dropbox-request-id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x-envoy-upstream-service-time: 77 x-frame-options: SAMEORIGIN x-server-response-time: 71 {&quot;name&quot;: &quot;xxxxxxxxx Inc&quot;, &quot;team_id&quot;: &quot;dbtid:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;num_licensed_users&quot;: 10, &quot;num_provisioned_users&quot;: 8, &quot;policies&quot;: {&quot;sharing&quot;: {&quot;shared_folder_member_policy&quot;: {&quot;.tag&quot;: &quot;anyone&quot;}, &quot;shared_folder_join_policy&quot;: {&quot;.tag&quot;: &quot;from_anyone&quot;}, &quot;shared_link_create_policy&quot;: {&quot;.tag&quot;: &quot;default_team_only&quot;}}, &quot;emm_state&quot;: {&quot;.tag&quot;: &quot;disabled&quot;}, &quot;office_addin&quot;: {&quot;.tag&quot;: &quot;disabled&quot;}}} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;(一部出力結果は置換しています)&lt;/p&gt; &lt;p&gt;このAPIログは現在ほかに自動テストのためにも利用しています。各種ビジネスロジックに対して過去のAPIログをリプレイテストすることによりフレームワークのリファクタリングなどによりビジネスロジックが影響を受けていないことを確認できます。また、テスト用のデータ準備のためにログ情報を匿名化するためのコマンドも準備して効率化を図っています。&lt;/p&gt; &lt;h2 id=&quot;apiの更新とsdkの更新では時差がある&quot;&gt;APIの更新とSDKの更新では時差がある&lt;/h2&gt; &lt;p&gt;新しいAPIが追加されたり、パラメータが追加された場合にSDK側がそれらの変更に追従するには一定の時間がかかります。Dropbox APIと公式SDKの場合、&lt;a href=&quot;https://github.com/dropbox/stone&quot;&gt;stone&lt;/a&gt;というAPI定義のDSLを使ってSDKを生成しているのでタイムラグは比較的短いですが&lt;a href=&quot;https://github.com/dropbox/dropbox-sdk-go-unofficial&quot;&gt;Go向けのSDK&lt;/a&gt;は非公式という位置付けのためか執筆時点で最新APIと8ヶ月分の差分があります。&lt;/p&gt; &lt;p&gt;この差分を許容するかどうかは要件次第ですが、&lt;a href=&quot;https://watermint.github.io/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;では最新APIを気軽に試してみたいという気持ちが強くありSDKを使わない方向へと流れを決めていきました。&lt;/p&gt; &lt;p&gt;SDKを使う大きなメリットの一つとしてデータ構造定義を自分で行わなくて良い点があります。以前JavaやScalaを使ってREST APIを呼び出すツールを作っていたときからも感じていましたが、SDKを使わない場合、ほとんどのコードはデータ構造定義と自前のドメインモデルとのマッピングのためのものでした。実装作業も単調であまり楽しくない割に、間違えるととことんはまるのでこのマッピングのための作業はなるべく避けたいと考えています。今回、またREST APIフレームワークを再発明するにあたっては、データ構造定義は最低限で済むように心がけました。&lt;/p&gt; &lt;p&gt;次の構造体はDropbox APIの共有リンクデータを取り扱うためのものですが、このツールでは必要最小限のフィールドのみを定義して対応することにしました。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Raw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;id&quot; json:&quot;id&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;\\.tag&quot; json:&quot;tag&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;url&quot; json:&quot;url&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;name&quot; json:&quot;name&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expires&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;expires&quot; json:&quot;expires&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathLower&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;path_lower&quot; json:&quot;path_lower&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visibility&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`path:&quot;link_permissions.resolved_visibility.\\.tag&quot; json:&quot;visibility&quot;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;一番最初に定義されている&lt;code class=&quot;highlighter-rouge&quot;&gt;Raw&lt;/code&gt;はAPIから返された生データで、続く&lt;code class=&quot;highlighter-rouge&quot;&gt;Id&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;Tag&lt;/code&gt;などのフィールドは &lt;code class=&quot;highlighter-rouge&quot;&gt;path:&quot;id&quot;&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;path:&quot;\\.tag&quot;&lt;/code&gt; といったJSON上のパスを示す付加情報から自動取得するようになっています。&lt;/p&gt; &lt;p&gt;共有リンクの名前、URL、有効期限などレポートとして出力したい、ユーザーの関心が高い項目はこのようにフィールドを定義し、それ以外の情報はJSONデータのみとして取り扱っています。レポートはCSV、xlsx、JSON形式の3種類で出力されますが、CSV・xlsxにはこの定義されたフィールドのみが出力されます。ここに含まれない情報が必要な場合にはJSON出力から&lt;code class=&quot;highlighter-rouge&quot;&gt;jq&lt;/code&gt;コマンドなどで取り出すという流れになります。&lt;/p&gt; &lt;p&gt;ビジネス上必要な情報のみを気軽に取り出すためにはCSV・xlsx形式レポートを参照すればよく、Id情報など自動化のためにプログラム上必要なデータはJSON形式から取り出せるという使い分けです。このようなゆるいデータ構造定義を使うことにより、API使用上フィールドが追加された場合でも影響をほとんど受けることなくプログラムを使えるようになりました。&lt;/p&gt; &lt;h1 id=&quot;要件や制約事項への対応&quot;&gt;要件や制約事項への対応&lt;/h1&gt; &lt;p&gt;それではまた前掲の要件や制約事項についてどのような対応をしたか振り返っていきます。&lt;/p&gt; &lt;h2 id=&quot;シングルバイナリで配布できること&quot;&gt;シングルバイナリで配布できること&lt;/h2&gt; &lt;p&gt;シングルバイナリで配布できることはこのようなツールにとってとても大きなテーマです。自社内のPCやサーバーで実行するツールであればある程度ライブラリ・OS要件を緩和しても良いのですが、様々なユーザーの環境で動作するツールのため対応OSの幅はとても重要です。シングルバイナリで配布する仕組みはGo言語に限ったものではありませんが、ライブラリ群やIDEの充実度はこの分野のあるいみパイオニアならではの強みがあると考えています。&lt;/p&gt; &lt;p&gt;またコンパイル済みバイナリとして提供するにあたってはライセンス形態にも気を配る必要があります。&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;本体はMITライセンスですが、ほかにも様々なライセンスのライブラリをリンクしています。ライブラリを選定するにあたっては相性の良いBSD、Apache v2ライセンスを中心に選定し、GPLは混在しないように気を付けています。&lt;/p&gt; &lt;h2 id=&quot;あらゆる処理をログに取得してトレーサビリティーを高める&quot;&gt;あらゆる処理をログに取得してトレーサビリティーを高める&lt;/h2&gt; &lt;p&gt;ユーザーの環境で発生する問題は多くの場合、手元の環境で再現が難しいものです。PC環境の違いもありますし、APIを使う先のDropboxやDropbox Businessの設定・環境・規模が違うケースがあるためです。このため、ログはトレースレベルでのログを全て出力しています。ログサイズはかなり膨れ上がりますが、デバッグのための時間的制約がより優先度が高いためログサイズについては許容しています。また、後述の通りログでディスクを圧迫しないよう現在は圧縮・ログローテーションを実施しています。&lt;/p&gt; &lt;p&gt;またログを解析しやすいよう現バージョンではすべてJSON形式(正確には&lt;a href=&quot;http://jsonlines.org/&quot;&gt;JSON Lines&lt;/a&gt;形式)でログ出力しています。grepやjqといったコマンドを組み合わせることでエラーやメモリ利用統計などを抽出しやすくするためです。&lt;/p&gt; &lt;p&gt;たとえば、次のように最後に実行したコマンドのログを取得し、その結果をjqで加工すれば時刻ごとのヒープの利用統計を取得できます。ユーザー環境ではメモリプロファイラなど詳細なデータ取得が難しいため、このような統計取得は原因の特定に役立ちます。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% tbx job log last -kind toolbox -quiet | jq -r 'select(.caller == &quot;es_memory/stats.go:33&quot;) | [.time, .HeapAlloc] | @csv' &quot;2020-07-23T12:34:08.549+0900&quot;,104991184 &quot;2020-07-23T12:34:13.548+0900&quot;,105058744 &quot;2020-07-23T12:34:18.550+0900&quot;,111987752 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;cpu時間よりも開発生産性を優先する&quot;&gt;CPU時間よりも開発生産性を優先する&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;は主にAPI呼び出しし、その結果を加工して出力するだけのプログラムです。実行時間は相対的にAPI処理待ち時間が多く、CPU時間の比率は高くなくほとんど無視できます。このため、プログラミングスタイルもそれに準じた格好にこの4年で変化してきました。&lt;/p&gt; &lt;p&gt;一番おおきな変化はScalaを一時期使っていたこともあり関数型・イミュータブルな実装を少しずつ目指そうとしているところです。この試みはすでにある程度失敗しているのですが、失敗談は後述するとしてまず細かな考え方の変遷から。&lt;/p&gt; &lt;p&gt;どこで読んだのかは失念しましたが、Goの考え方として関数などに処理の複雑性を隠さないようにすべきと書かれていたと思います。たとえば、何かの構造体のフィールドの合計を取る処理が必要なとき、今までの経験では普通にそれらを再利用・テストしやすいよう関数として切り出すことを考えます。まあ、そんなに難しいことではありません。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;これはこれで動作しますし全く問題ないのですが、前掲の主張では&lt;code class=&quot;highlighter-rouge&quot;&gt;TotalSize()&lt;/code&gt;を呼び出す際O(N)の処理なのか、O(N^2)の処理なのかわからないがどのぐらいの処理オーダーが背後に隠れているか呼び出し側では区別できないからこういった簡単な処理はインライン化すべきである。といったような主張だったとおもいます。もはやGo入門初期に間違えてみた迷信だったのかもしれません。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyBizLogic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Total&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Total&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;当然ながらコードの可読性が下がりますし、ミスタイプやテストカバレッジ不足で生産性は著しく低下しました。もし本当に処理オーダーを気にしたいのであれば、関数名にハンガリアンネーミングで&lt;code class=&quot;highlighter-rouge&quot;&gt;ONLOGNTotal()&lt;/code&gt;とか&lt;code class=&quot;highlighter-rouge&quot;&gt;ON2Total()&lt;/code&gt;のように命名した方がよほど効果的でしょう。完全に迷信でした。&lt;/p&gt; &lt;p&gt;さて、この考え方が迷信であることが自分の中で確定したところで(確定するまでに2年ぐらいかかりました…)、ScalaやRubyなどいつもやっているような配列、ハッシュ操作を同じようにやりたいという欲求にかられるのは自然なことです。配列Aと配列Bに共通する要素だけ抽出したり、前掲の合計値のような処理もプログラムの性質上それなりに多く扱いますのでこういった処理の効率化は大きな改善につながります。&lt;/p&gt; &lt;p&gt;いくつか既存ライブラリを調べましたが&lt;a href=&quot;https://github.com/thoas/go-funk&quot;&gt;go-funk&lt;/a&gt;というプロジェクトが興味深く参考にしていくことにしました。go-funkではリフレクションをフル活用して可読性・生産性向上を目在しています。プロジェクト紹介の&lt;a href=&quot;https://github.com/thoas/go-funk#performance&quot;&gt;Performance&lt;/a&gt;にもある通り、&lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsInt()&lt;/code&gt;のように型ごとに関数を用意したりはしないという方向性からもその目標がよくわかります。&lt;/p&gt; &lt;p&gt;go-funkを使おうかと思いましたが、Go言語の練習のためということで自作することにしました。出来上がったのは&lt;a href=&quot;https://github.com/watermint/toolbox/tree/71.4.504/essentials/collections&quot;&gt;次のようなライブラリ&lt;/a&gt;です。 たとえば配列を&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;と定義して、共通する要素を取り出すというシンプルな関数が実装が出来上がりました。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -&amp;gt; [2, 3]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;これである程度イミュータブルかつ関数型的にかけるライブラリが作れるかと思ったのですが、前述の「この試みはすでにある程度失敗」との通り言語仕様上の壁にぶつかりました。問題は型情報です。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2Files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ... folder1Files, folder2Files の取得&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 配列からライブラリで使う配列インタフェースに変換&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder1Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder2List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewByInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder2Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// folder1, folder2に共通するファイルを抽出&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder1List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder2List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;さてここまではある程度動作するのですが、問題はこの結果得られる要素それぞれを扱うときに毎回キャストが必要となるところです。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;commonFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 要素に対する処理&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;まあ問題ないと言えば問題ないのですが、ライブラリを使うことである程度効率化できる一方実行時の型例外が発生する可能性が増えてしまいました。JavaやScalaなど強い型あるいは型変数がある言語での解消は簡単ですが、Goのように弱い型の言語ではこの解決は難しいでしょう。&lt;/p&gt; &lt;p&gt;標準ライブラリの&lt;code class=&quot;highlighter-rouge&quot;&gt;sort.Strings()&lt;/code&gt;のように型ごとの配列を渡して処理する方式にすると型に関するエラーは減少します。一方で、これが通用するのは配列の要素数が変わらない時だけで前掲の2つの配列から共通要素を取り出したり、配列を結合したりするケースには使えません。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;menu := []string{&quot;そば&quot;, &quot;うどん&quot;, &quot;ラーメン&quot;} sort.Strings(menu) // 配列サイズは処理前後で変わらない &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;今のところは単体テストで問題をカバーしつつこのライブラリを全面的に使っていく方向で考えていますが、またいいアイデアがあればぜひ取り込んでいきたいと思っています。&lt;/p&gt; &lt;h2 id=&quot;国際化対応-日本語と英語&quot;&gt;国際化対応 (日本語と英語)&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;は海外ユーザーにも多く使っていただいていますが、日本のユーザーにも使っていただいています。当初は英語のみ対応していましたが、昨年より日本語にも対応しました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-22-omegat.png&quot; alt=&quot;OmegaT&quot; /&gt;&lt;/p&gt; &lt;p&gt;翻訳メモリソフトウエアは&lt;a href=&quot;https://omegat.org/&quot;&gt;OmegaT&lt;/a&gt;を使っています。OmegaTにJSONデータ形式対応プラグインを導入して利用しています。&lt;/p&gt; &lt;p&gt;国際化のためのライブラリもたくさんありますが、あまり深く考えずに自作しています。JSONにメッセージのキーと翻訳テキストを格納し、表示用メッセージを言語によって切り替えています。&lt;/p&gt; &lt;p&gt;今思えば&lt;a href=&quot;https://github.com/nicksnyder/go-i18n/&quot;&gt;go-i18n&lt;/a&gt;あたりを使っても良かったかもしれません。go-i18nではCLDRを使っているようで複数形など言語ごとの差分をより細かく吸収できるようです。いずれライブラリを切り替えるなど試してみる価値はありそうです。幸い、国際化については現状あまり深い実装をしていないため切り替えコストはさほど高くないと考えています。&lt;/p&gt; &lt;h2 id=&quot;時短のためにドキュメントは基本的に自動生成&quot;&gt;時短のためにドキュメントは基本的に自動生成&lt;/h2&gt; &lt;p&gt;個人プロジェクトとして比較的負担に感じる部分は一番面倒な部分はドキュメントの作成です。最初のドキュメント作成も手間がかかりますが仕様変更の際にドキュメント更新などメンテナンスもそれなりに時間がかかります。&lt;/p&gt; &lt;p&gt;このため、&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;ではマニュアル類などドキュメントは可能な限り自動生成しています。解説が不足が生じている部分はありますが、網羅的にドキュメントが更新できることは大きなメリットです。翻訳テキストさえ準備すれば同じ形式のマニュアルを複数言語に対して準備することも難しくありません。&lt;/p&gt; &lt;p&gt;ただ一口に自動生成といってもいくつか段階を分けて対応が必要でした。コマンドの仕様をプログラム上のデータとして取り扱うこと、メッセージをソースコードから抽出すること、不足メッセージの検出とレポート、&lt;a href=&quot;https://github.com/watermint/toolbox/blob/71.4.504/doc/generated_ja/changes.md&quot;&gt;リリースノート向けの更新差分文章生成&lt;/a&gt;、リリースプロセスへの検査の組み込みなどをへて現在はある程度読めるマニュアル類が自動生成できるようになりました。&lt;/p&gt; &lt;p&gt;コマンド仕様がデータとして取り扱えるようになったことは嬉しい副作用もありました。コマンド仕様はリリースごとにJSON形式で格納しているのですが、このJSONを使ってたとえば、CSVファイルを引数にとるコマンドの一覧を抽出といった操作が簡単になりました。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% gzcat doc/generated/spec.json.gz | jq -r '.[] | select(.feeds | length &amp;gt; 0) | .path' file dispatch local file import batch url group batch delete member clear externalid member delete member detach member invite member quota update member replication member update email member update externalid member update profile team activity batch user team device unlink team filerequest clone teamfolder batch archive teamfolder batch permdelete teamfolder batch replication &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ログファイルや中間ファイルでディスクを圧迫しすぎないこと&quot;&gt;ログファイルや中間ファイルでディスクを圧迫しすぎないこと&lt;/h2&gt; &lt;p&gt;デバッグ作業効率を向上させるため、ログ出力部分には比較的多くの時間を費やしました。一方で、大きなフォルダやチームに対する操作は実行時間も長くなりログサイズも無視できない大きさになりました。ときに100GBを超えることもあります。このため、最近のリリースではログをgzip圧縮の上分割して、一定容量を超えた場合に古いログは削除するような仕組みを取り入れています。&lt;/p&gt; &lt;p&gt;また、古いログから順番に削除すると起動時のパラメータなど重要なデータが失われる場合があるのでそれらのデータは別のログに出力するなどの工夫も必要でした。&lt;/p&gt; &lt;p&gt;ログの圧縮やローテーション処理の実装自体はさほど難易度がたかくありませんでしたが、Windows上での安定性を向上させることには多くの時間を費やしました。マルチスレッド環境下でのデッドロックが原因です。ミューテクスのデッドロックが発生したり、I/O処理待ちがやはりデッドロックするなどいくつかの問題がありました。再現頻度は1〜数時間に1度程度で修正と修正の確認はなかなかの難易度でした。&lt;/p&gt; &lt;p&gt;今もすべての条件に対して耐久性があるとは考えていませんが、確率の高いデッドロックは概ね解消していると考えています。なおデバッガ接続中に再現したデッドロックが発生箇所は概ね次のようなコードでした。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogWriter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;確かに、&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;に対する&lt;code class=&quot;highlighter-rouge&quot;&gt;Write()&lt;/code&gt;自体が何らかOSからロックされているとデッドロックされる可能性があります。詳しく仕様の調査はしていませんが、おそらくWindows上ではI/Oロックがより厳密であるためでしょう。&lt;/p&gt; &lt;p&gt;ブラックボックステスト的にわかることは、PowerShellなどコンソール上で何かテキストを選択するとスクロールがロックされ標準出力が停止します。これに従い、プログラム側も標準出力を待っていますのでプログラムが一時停止したようになります。macOSやLinuxではこのようなロックは発生しません。また同様の課題が発生した際には詳しく調査してみたいと思っています。&lt;/p&gt; &lt;h2 id=&quot;メモリの消費を概ね数百mb程度に抑えること&quot;&gt;メモリの消費を概ね数百MB程度に抑えること&lt;/h2&gt; &lt;p&gt;外部ライブラリを使うとメモリ消費が予想よりも一気に膨れ上がるケースがあります。現状いくつか大きくメモリをつかうライブラリについては対処策を組み込んでいます。具体的な例をいくつか紹介していきます。&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;ではレポートファイル出力フォーマットにCSVやJSONの他にExcelなどが利用するxlsx形式ファイルがあります。&lt;/p&gt; &lt;p&gt;xlsx形式は使わずCSVだけでも良いのですが、日本語が含まれるCSV (UTF-8エンコーディング、BOMなし)ではExcelで読み込もうとすると、ExcelはBOMがないためエンコーディングを正しく認識できず文字化けしてしまいます。CSV側にBOMをつけても良いのですが、BOMなしを期待するプログラムでは使い勝手が悪くなってしまいます。このため、カジュアルに使っても文字化けの問題を起こさないためにxlsx形式での出力もサポートするようになりました。&lt;/p&gt; &lt;p&gt;さてxlsx形式は&lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot;&gt;Office Open XML&lt;/a&gt;のうちの一つで今はISO/IEC 29500として標準化されています。xlsx形式のファイルはzip圧縮されたいくつかのファイルの集まりで、メインのデータが含まれるファイルはXML形式で作られています。&lt;/p&gt; &lt;p&gt;スプレッドシートをXMLで表現するということは、スプレッドシート全体を一度DOMなどXMLツリーとしてメモリ上に展開する必要があるということです。スプレッドシートの容量が大きくなると比例してメモリを利用します。 このため、レポートとしてXML形式で出力しようとするとレポート行数に従い比例的に秋メモリ容量を食い潰していくことになります。場合によってはこれが原因でOut of memoryエラーとなり処理が停止してしまします。対策として、xlsx形式レポートは一定行数を超えた場合には別ファイルに分割して出力するようにしました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/images/2020-07-22-memory-consumption.png&quot; alt=&quot;メモリ利用状況のトレンド&quot; /&gt;&lt;/p&gt; &lt;p&gt;これ以外にもKVSとして利用している&lt;a href=&quot;https://github.com/dgraph-io/badger&quot;&gt;Badger&lt;/a&gt;もキャッシュのためにデータ件数に応じてメモリを利用するため幾度となくチューニングを繰り返しました。ここでも役に立ったのは、ログファイルからメモリの統計を取得する方法で、パラメータを変えた長時間の測定にも役に立ちました。上図は2つのパラメータ設定でのメモリ消費トレンドを示したものです。&lt;/p&gt; &lt;h2 id=&quot;耐障害性の向上と実行速度の最適化&quot;&gt;耐障害性の向上と、実行速度の最適化&lt;/h2&gt; &lt;p&gt;耐障害性向上と実行速度についてはまだ伸び代のある分野です。耐障害性について、API呼び出し時の自動リトライなどはすでに実装済みですが、フレームワーク全体としてのエラー処理については改善の余地があると考えています。&lt;/p&gt; &lt;p&gt;Go言語では複数の戻り値を使え、エラー処理のために最後の戻り値として&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;を返すデザインが標準的です。&lt;a href=&quot;https://github.com/watermint/toolbox/&quot;&gt;watermint toolbox&lt;/a&gt;はビジネスロジックの中核であるコマンドと、それを支えるフレームワーク部分で構成されています。多くの場合、ビジネスロジック部分ではAPIから返されるエラーを処理しないためエラーが発生してもそのまま上位フレームワークへ返すよう実装しています。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Peer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 上位フレームワークへエラーを返す&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ... 後続の処理&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ネットワークIOエラーなどはREST APIフレームワーク側で吸収していますし、これはこれで問題ないのですが、フォルダからファイル一覧を取得する際、ファイルがなければ別の処理をするといったビジネスロジック上必要なエラーなのか、認証エラーなどフレームワーク側で対応するエラーなのかまた判定ロジックを各所で書かなければならない点がいかがなものかと考えています。&lt;/p&gt; &lt;p&gt;最終的にまた現在の形に落ち着くかもしれませんが、フレームワークで吸収するものとビジネスロジック側で吸収するものを明示的に書き分けられるような仕組みを作るかもしれません。&lt;a href=&quot;https://github.com/mattn/go-try&quot;&gt;Try型のような実装の試み&lt;/a&gt;もあるようですし、エラーで返す場合と&lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt;を使うなど方法があるかもしれません。&lt;/p&gt; &lt;p&gt;実行速度の最適化についても改善の余地が大きく残っています。現在のコマンドはファイルのアップロードやフォルダの権限情報取得などある程度処理分散できるものについてはマルチスレッドで実行されるようプログラムしています。Go言語ではgoroutineやチャネルなど並列処理のための環境は整っているのであまり大きく悩まなくても実装できる点が気に入っています。&lt;/p&gt; &lt;p&gt;一方で、実行時間が数日以上などある程度長くなる場合にはエラーで停止した際に、また再開ポイントまでたどり着くための処理でオーバーヘッドが大きくなったり、中間ファイルが肥大化したり、進捗がわかりづらいといった課題もあります。このため、そろそろ永続化可能な非同期キューなどを用いた処理フレームワークを導入するなど検討が必要でしょう。&lt;/p&gt; &lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt; &lt;p&gt;リリースプロセスなどいくつか開発プロセス自体もツールの一部として取り込んだことにより、開発効率は4年前と比べれば格段に向上しています。一方で、Go言語やその取り巻くエコシステムのおかげで気軽に予想だにしなかった高機能な仕様を追加できるようになりました。開発当初はJavaやScala、Rubyのほうが経験値が高かったので苦労する部分もありましたがようやく大体の実装はGoでできるなという感覚が得られてきました。&lt;/p&gt; &lt;p&gt;また面白い実装方法を思いついたり、いいライブラリに出会えた際には紹介していきたいと思います。&lt;/p&gt; </content> </entry> <entry> <title>Analyze Process Monitor (ProcMon) XML in JSON format</title> <link href="https://watermint.org/2019/12/17/procmon-xml-json/"/> <updated>2019-12-17T00:00:00-06:00</updated> <id>https://watermint.org/2019/12/17/procmon-xml-json</id> <content type="html">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/procmon&quot;&gt;The Process Monitor&lt;/a&gt; is the tool in Sysinternals toolset by Microsoft. It is handy to capture &amp;amp; analyze all process activities. But the GUI tool tends to consume more memory, and it’s time-consuming for searching for particular events.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;images/2019-12-17-procmon.png&quot; alt=&quot;Process Monitor&quot; /&gt;&lt;/p&gt; &lt;p&gt;Of course, ProcMon can export data as CSV or XML. CSV format is handy for analyzing events. But it lacks process information details.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-csv&quot;&gt;&quot;Time of Day&quot;,&quot;Process Name&quot;,&quot;PID&quot;,&quot;Operation&quot;,&quot;Path&quot;,&quot;Result&quot;,&quot;Detail&quot; &quot;10:00:50.9444337&quot;,&quot;explorer.exe&quot;,&quot;7812&quot;,&quot;RegQueryKey&quot;,&quot;HKCU\Software\Classes&quot;,&quot;SUCCESS&quot;,&quot;Query: Name&quot; &quot;10:00:50.9445179&quot;,&quot;explorer.exe&quot;,&quot;7812&quot;,&quot;RegQueryKey&quot;,&quot;HKCU\Software\Classes&quot;,&quot;SUCCESS&quot;,&quot;Query: HandleTags, HandleTags: 0x0&quot; &quot;10:00:50.9445443&quot;,&quot;explorer.exe&quot;,&quot;7812&quot;,&quot;RegQueryKey&quot;,&quot;HKCU\Software\Classes&quot;,&quot;SUCCESS&quot;,&quot;Query: HandleTags, HandleTags: 0x0&quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For XML, the ProcMon’s XML is like below (UTF-8 with BOM). All data is under tag &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;procmon&amp;gt;&lt;/code&gt;. That means if you’d like to process this XML with DOM, then that required to expand all data on memory. However, ProcMon’s data tend to grow huge. That could grow up to a few GBs within a few minutes.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;U+FEFF&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;procmon&amp;gt;&amp;lt;processlist&amp;gt;&amp;lt;process&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ProcessIndex&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ProcessIndex&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ProcessId&amp;gt;&lt;/span&gt;10516&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ProcessId&amp;gt;&lt;/span&gt; ...... &lt;span class=&quot;nt&quot;&gt;&amp;lt;/process&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/processlist&amp;gt;&amp;lt;eventlist&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;event&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ProcessIndex&amp;gt;&lt;/span&gt;5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ProcessIndex&amp;gt;&lt;/span&gt; .... &lt;span class=&quot;nt&quot;&gt;&amp;lt;/event&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/eventlist&amp;gt;&amp;lt;/procmon&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then, I tried to convert that XML into &lt;a href=&quot;http://jsonlines.org/&quot;&gt;JSONL format&lt;/a&gt; just for tags under &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;processlist&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;eventlist&amp;gt;&lt;/code&gt;. Then, we can analyze data with the tool like &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;. To convert ProcMon’s XML, I created a ruby script like below. (Please install gems before run)&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nokogiri &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;activesupport &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/ruby&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nokogiri'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/core_ext/hash/conversions'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'process'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'event'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;outer_xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then, run like below. I prefer I split &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; after this.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Logfile.XML | ruby convert.rb &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; logfile.json &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jq &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; .event logfile.json | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ^null &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; event.json &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jq &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; .process logfile.json | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ^null &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; process.json &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then, you can analyze like below. (histogram for event result)&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jq .Result event.json | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 &lt;span class=&quot;s2&quot;&gt;&quot;NO MORE MATCHES&quot;&lt;/span&gt; 2 &lt;span class=&quot;s2&quot;&gt;&quot;FAST IO DISALLOWED&quot;&lt;/span&gt; 2 &lt;span class=&quot;s2&quot;&gt;&quot;NOT A DIRECTORY&quot;&lt;/span&gt; 3 null 4 &lt;span class=&quot;s2&quot;&gt;&quot;NO SUCH FILE&quot;&lt;/span&gt; 10 &lt;span class=&quot;s2&quot;&gt;&quot;BUFFER TOO SMALL&quot;&lt;/span&gt; 14 &lt;span class=&quot;s2&quot;&gt;&quot;CANCELLED&quot;&lt;/span&gt; 20 &lt;span class=&quot;s2&quot;&gt;&quot;0xC00004AE&quot;&lt;/span&gt; 37 &lt;span class=&quot;s2&quot;&gt;&quot;FILE LOCKED WITH WRITERS&quot;&lt;/span&gt; 38 &lt;span class=&quot;s2&quot;&gt;&quot;NO EAS ON FILE&quot;&lt;/span&gt; 89 &lt;span class=&quot;s2&quot;&gt;&quot;NO MORE ENTRIES&quot;&lt;/span&gt; 103 &lt;span class=&quot;s2&quot;&gt;&quot;END OF FILE&quot;&lt;/span&gt; 173 &lt;span class=&quot;s2&quot;&gt;&quot;NAME INVALID&quot;&lt;/span&gt; 211 &lt;span class=&quot;s2&quot;&gt;&quot;NO MORE FILES&quot;&lt;/span&gt; 220 &lt;span class=&quot;s2&quot;&gt;&quot;NAME COLLISION&quot;&lt;/span&gt; 471 &lt;span class=&quot;s2&quot;&gt;&quot;PATH NOT FOUND&quot;&lt;/span&gt; 612 &lt;span class=&quot;s2&quot;&gt;&quot;FILE LOCKED WITH ONLY READERS&quot;&lt;/span&gt; 862 &lt;span class=&quot;s2&quot;&gt;&quot;OPLOCK HANDLE CLOSED&quot;&lt;/span&gt; 1786 &lt;span class=&quot;s2&quot;&gt;&quot;IS DIRECTORY&quot;&lt;/span&gt; 1864 &lt;span class=&quot;s2&quot;&gt;&quot;INVALID PARAMETER&quot;&lt;/span&gt; 1910 &lt;span class=&quot;s2&quot;&gt;&quot;REPARSE&quot;&lt;/span&gt; 3427 &lt;span class=&quot;s2&quot;&gt;&quot;NOT REPARSE POINT&quot;&lt;/span&gt; 4849 &lt;span class=&quot;s2&quot;&gt;&quot;BUFFER OVERFLOW&quot;&lt;/span&gt; 11970 &lt;span class=&quot;s2&quot;&gt;&quot;NAME NOT FOUND&quot;&lt;/span&gt; 104456 &lt;span class=&quot;s2&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; </content> </entry> <entry> <title>Javaパズラーの問題ができるまで</title> <link href="https://watermint.org/2018/07/23/how-its-made-java-puzzlers/"/> <updated>2018-07-23T00:00:00-05:00</updated> <id>https://watermint.org/2018/07/23/how-its-made-java-puzzlers</id> <content type="html">&lt;p&gt;以前日経ソフトウエア2013年9月号〜2015年3月号にて至極のJavaクイズという連載を、持ち回りにて執筆していました。この連載は2ページの分量に、十数行程度のコードを示し、実行結果を4択程度の選択肢、掛け合いの形式で問題を補足し、正解を示し、問題から得られる教訓までを説明するというもので、もとはJoshua BlockらによるJavaOneの人気セッションJava Puzzlersを参考にしています。ほかには&lt;a href=&quot;https://blogs.oracle.com/wlc/java-javajava-day-tokyo-2013-v2&quot;&gt;Java Day Tokyo&lt;/a&gt;などのイベントでも過去に同様のセッションを行なっていました。このJavaパズラーの問題ができるまでを数年ぶりに振り返ってみます。&lt;/p&gt; &lt;h1 id=&quot;問題ができるまで&quot;&gt;問題ができるまで&lt;/h1&gt; &lt;p&gt;良問といえるのは、問題を正解できなかったとしても、なるほどと言える教訓が得られるものです。そのような問題は間違えたとしてもスッキリと気持ちよく教訓として読み進めることができます。実際、本家Java Puzzlersにはそのような良問がたくさん掲載されています。&lt;/p&gt; &lt;p&gt;逆に良問と言いづらいのは重箱の隅をつついたような違いを問題として表現したものです。そのような問題は、教訓が得られるというよりは「ふーん、そうなの。。」ぐらいの感想しか得られないものです。&lt;/p&gt; &lt;p&gt;また、知識だけを問う問題もあまり良問とは言えないでしょう。たとえば&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.time&lt;/code&gt;のようなパッケージは問題を作りやすいのですが、インタフェースやクラス、メソッドもかなり多いので知識を問う問題になりがちです。出題する際には解説などで工夫が必要になります。&lt;/p&gt; &lt;p&gt;出題範囲について、あまり一般的でないライブラリの仕様などを出題するのはためらわれます。たとえばJava SE標準ライブラリで、日常よく利用するであろう基本ライブラリです。ラムダ式など比較的新しい言語仕様も良いでしょう。 パッケージで言えば&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util&lt;/code&gt;あたりで出題できると良問の期待が高まります。 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.io&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;java.nio&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql&lt;/code&gt;なども範囲として良いですが直接これらのパッケージを利用するよりはフレームワークなどに処理を任せることが多いでしょう。出題する場合には多めに注釈を入れるなどで調整を進めます。&lt;/p&gt; &lt;p&gt;個人的には問題を考えるには教訓から考えていきます。Java言語仕様はもちろんのこと、新しいJava SEバージョンで変更された振る舞いや、&lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;や&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;Checkstyle&lt;/a&gt;などのルールもよく参考にしていました。&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;の扱いや&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;の振る舞い、評価順などにまつわる問題は作りやすい印象があります。ただ、それらにまつわる問題はすでに出題済みであったり本家Java Puzzlersでだいたいカバーされているので新規性のあるテーマを探すのはなかなか骨の折れる作業です。&lt;/p&gt; &lt;h1 id=&quot;選択肢ができるまで&quot;&gt;選択肢ができるまで&lt;/h1&gt; &lt;p&gt;回答は4択程度のなかから選ぶことになっています。必ず4択でなければならない訳ではありませんが、2択だと大抵の場合回答があからさますぎるので、4択程度になるよう調整します。 たとえば&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;の違いについて出題しようとした場合、ぱっと思いつく選択肢のパターンは次のようなものです。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;が同じ振る舞いになる&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;が異なる振る舞いになる&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;が発生する&lt;/li&gt; &lt;li&gt;その他&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;選択肢を考える上で、4つ目が「その他」となるのはできれば避けたいものです。ボツとなりやすいのは「その他」で全く別の例外が発生するようなケースです。&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;の違いから教訓を説明したいのに、別の例外が発生するというようでは出題意図がよくわからなくなってしまいます。時間の都合で妥協することもありますが、なるべくこだわりたい部分です。&lt;/p&gt; &lt;p&gt;どうしても詰まってしまった場合は、あえて出題意図を変えて選択肢をすべて例外発生にしてみるというのも面白いでしょう。たとえば下記のような選択肢ではどうでしょうか。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;が発生する&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverflowError&lt;/code&gt;が発生する&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;が発生する&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IndexOutOfBoundsException&lt;/code&gt;が発生する&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IndexOutOfBoundsException&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;があるので&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;などに関連する問題と教訓にすれば面白そうです。&lt;code class=&quot;highlighter-rouge&quot;&gt;StackOverflowError&lt;/code&gt;と迷うように再帰処理をいれてみるなどいろいろ試せそうです。&lt;/p&gt; &lt;p&gt;このように最初&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;の違いを出題しようと考えていたものが、別の教訓を説明するような問題にどんどん変わっていくこともあります。問題のコードは&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;の違いを説明しようとしてそうなのに、実は&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;の振る舞いについての教訓だった。となれば読みがいがありそうです。&lt;/p&gt; &lt;h1 id=&quot;問題コードができるまで&quot;&gt;問題コードができるまで&lt;/h1&gt; &lt;p&gt;問題コードができるまでにも紆余曲折があります。日経ソフトウエアのように紙面であれば40行程度あっても入ることがあるのですが、やはりあまり長いとテンポが悪くなるのでなるべく短く済ませたいものです。セミナーなどでプレゼンテーションとして出題する際にはスライドに選択肢まで入れた上で一画面に収まり、会場後ろの方にも見えるようフォントサイズはできるだけ大きくする必要があります。スライドテンプレートやレイアウトによりますが15行程度までがおおよその限度となります。&lt;/p&gt; &lt;p&gt;このためあまり冗長な初期化処理はできませんし、教訓のコアとなる出題部分以外に必要となるクラス・メソッド定義については最低限に抑える必要があります。 読みやすさを考慮しある程度改行も入れていく必要があり、インデントも不自然にならないよう工夫する必要があります。Java言語仕様などの制限を考えると実際に使えるのは20行程度と考える必要があります。&lt;/p&gt; &lt;p&gt;どれだけ削っても収まりきらない場合は残念ながらボツ案となります。よりテーマを絞り込むなど教訓を考えるところまで手戻りとなります。&lt;/p&gt; &lt;h1 id=&quot;掛け合い部分ができるまで&quot;&gt;掛け合い部分ができるまで&lt;/h1&gt; &lt;p&gt;イベントなどでプレゼンテーションする場合は2人のプレゼンターがあらかじめ出題者と模擬回答者として役割をきめておきます。問題がJava SEバージョンに依存する場合や新仕様などをテーマにしている場合、模擬回答者がうまく出題者に質問するような格好で補足していきます。&lt;/p&gt; &lt;p&gt;追加で模擬回答者は「これはひっかけですね」などと、いくつかのトリックを説明しつつ、あまり教訓の核心に触れないように打ち合わせておきます。理想的にはこのように掛け合いで説明できるようなトリックが教訓以外でも含まれていたほうが良いのですが、あまりいろいろ高望みすると締め切りがどんどん厳しくなります。。&lt;/p&gt; &lt;h1 id=&quot;教訓ができるまで&quot;&gt;教訓ができるまで&lt;/h1&gt; &lt;p&gt;問題と選択肢ができあがえれば作業のほとんどは完成です。あとは教訓をわかりやすく説明するのですが、そうは言っても紙面に収まるようわかりやすく手短に伝えようとするとなかなか難しいものです。&lt;/p&gt; &lt;h1 id=&quot;タイトルができるまで&quot;&gt;タイトルができるまで&lt;/h1&gt; &lt;p&gt;タイトルはなるべく教訓や選択肢の特徴を表現しつつも、ヒントになりすぎないよう微妙な調整が必要です。教訓を知った上でニヤリとできるようなタイトルとなれば大成功といっていいと思います。&lt;/p&gt; &lt;h1 id=&quot;問題を作ってみる&quot;&gt;問題を作ってみる&lt;/h1&gt; &lt;p&gt;数年ぶりに問題を作ってみました。&lt;/p&gt; &lt;h2 id=&quot;オーはオリンピックのオー&quot;&gt;オーはオリンピックのオー&lt;/h2&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.stream.Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;City&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futureOlympics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tokyo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Paris&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Los Angeles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futureOlympics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Olympics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;London&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rio&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tokyo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Paris&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Los Angeles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;City:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;City:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Olympics&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Olympics:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;プログラムを実行すると何が出力されるでしょうか。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;「0」&lt;/li&gt; &lt;li&gt;「2」&lt;/li&gt; &lt;li&gt;「3」&lt;/li&gt; &lt;li&gt;「6」&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;h2 id=&quot;解答&quot;&gt;解答&lt;/h2&gt; &lt;p&gt;答えは「1. 「0」」です。”London”や”Rio”といった文字列を順番にCityクラスのインスタンスにマッピングし、&lt;code class=&quot;highlighter-rouge&quot;&gt;isFuture&lt;/code&gt;で将来のオリンピックだけに限定したうえで、残ったオリンピック開催都市の名前から &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt; (小文字のオー)が何文字あるか合計を計算するプログラムです。&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isFuture&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;countO&lt;/code&gt;にはあまり不審なところはありませんが、いかにも怪しいのは次の行です。&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Olympics&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Cityクラスのインスタンスに文字列を連結しています。オートキャストにより&lt;code class=&quot;highlighter-rouge&quot;&gt;City#toString&lt;/code&gt;が呼び出され、その後に” Olympics”が連結されます。&lt;code class=&quot;highlighter-rouge&quot;&gt;City&lt;/code&gt;クラスは&lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;をオーバーライドしていないため&lt;code class=&quot;highlighter-rouge&quot;&gt;Object#toString&lt;/code&gt;が呼び出され&lt;code class=&quot;highlighter-rouge&quot;&gt;City@2ed94a8b&lt;/code&gt;のようなクラス名とハッシュ値を使った文字列表現になります。&lt;/p&gt; &lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;City@2ed94a8b&lt;/code&gt;にはo (小文字のオー)は含まれませんから合計値は0となるというわけです。&lt;/p&gt; &lt;h2 id=&quot;教訓&quot;&gt;教訓&lt;/h2&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;の実装は忘れずに。&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;p&gt;.&lt;/p&gt; &lt;h2 id=&quot;問題のレビュー&quot;&gt;問題のレビュー&lt;/h2&gt; &lt;p&gt;さてではこのパズラー問題をレビューしてみましょう。先ほど怪しいとご紹介したこの行。&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Olympics&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;処理の文脈上、&lt;code class=&quot;highlighter-rouge&quot;&gt;isFuture&lt;/code&gt;などまでの処理は自然ですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;をカウントする処理の前に” Olympics”と追加するというのはかなり不自然です。できればこの不自然さをうまく消したいところです。また、いくつかStream APIを利用しているのにあまり特徴を活かせていないにのも改善したいところです。&lt;/p&gt; &lt;p&gt;選択肢についても同様でうまく迷いを誘導できていないように見えます。「2.「2」」はTokyoだけがカウントされる、あるいはTokyoとLos Angelsで1ずつカウントされればそうなりますがちょっと考えにくい選択肢です。 「3. 「3」」はTokyoとLos Angelsでどちらも&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;がカウントされたと考えるなら選択される可能性があります。 「4. 「6」」はすべての都市名について&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;がカウントされたと考えるなら選択される可能性があります(&lt;code class=&quot;highlighter-rouge&quot;&gt;isFuture&lt;/code&gt;がうまく働かなかった)。ただちょっとそれも強引でしょう。&lt;/p&gt; &lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt; &lt;p&gt;このように、教訓を作る → 選択肢を作る → コードを作る → レビューというサイクルを何度も繰り返すことでより良い問題が作成できます。 ただ、本当にちゃんとした教訓となるような良問を作るのはなかなか難しいものです。(特に締め切りがある場合には。。)&lt;/p&gt; </content> </entry> <entry> <title>Jekyllサイトにタグとミニマイズを</title> <link href="https://watermint.org/2018/07/22/jekyll-tagging-and-minimize/"/> <updated>2018-07-22T00:00:00-05:00</updated> <id>https://watermint.org/2018/07/22/jekyll-tagging-and-minimize</id> <content type="html">&lt;p&gt;このサイトを&lt;a href=&quot;/tags/jekyll/&quot;&gt;Jekyllに移行した&lt;/a&gt;ことでメンテナンスはかなり簡単になりました。&lt;a href=&quot;/2017/01/15/from-github-pages-to-aerobatic/&quot;&gt;Github Pagesのホスティング&lt;/a&gt;を使っているのでJekyllで構築したサイトも自動生成してくれます。&lt;/p&gt; &lt;p&gt;ただ、Github Pagesで利用できるJekyllプラグインには制限があり、利用したかったタグごとのページ生成プラグインや、ミニマイズのプラグインは利用できませんでした。仕方なしとは思っていたのですが、タグごとに記事がまとまっているURLがあったほうが記事を紹介する際にも便利ですからGithub Pages側でHTML生成してもらうのではなく、あらかじめ手元でHTMLを生成することにしました。&lt;/p&gt; &lt;h1 id=&quot;docker環境&quot;&gt;Docker環境&lt;/h1&gt; &lt;p&gt;HTML生成のためにプラグインなどを導入済みのDocker環境を作っておきます。&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM jekyll/jekyll:stable RUN apk add --no-cache --virtual build-dependencies build-base RUN apk add --no-cache libxml2-dev libxslt-dev RUN apk add --no-cache ruby-dev curl-dev zlib-dev yaml-dev RUN gem install nokogiri RUN gem install minima RUN gem install jekyll-import RUN gem install jekyll-minifier RUN gem install jekyll-tagging RUN gem install jekyll-paginate ENTRYPOINT [&quot;jekyll&quot;, &quot;build&quot;, &quot;--config&quot;, &quot;/srv/jekyll/source/_config.yml,/srv/jekyll/source/_config_prd.yml&quot;, &quot;--destination&quot;, &quot;/srv/jekyll/release&quot;, &quot;--source&quot;, &quot;/srv/jekyll/source&quot;] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;なお、ディレクトリ構成は次のようなイメージです。必要に応じて読み替えてください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;サイトルート &lt;ul&gt; &lt;li&gt;source … Jekyllのソース一式&lt;/li&gt; &lt;li&gt;release … Github PagesにアップロードするHTML一式&lt;/li&gt; &lt;li&gt;staging … 表示確認用HTML生成先&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;表示確認用にjekyllをserveで起動するには最後の行を下記のように変えたイメージを準備しておきます。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ENTRYPOINT [&quot;jekyll&quot;, &quot;serve&quot;, &quot;--config&quot;, &quot;/srv/jekyll/source/_config.yml,/srv/jekyll/source/_config_dev.yml&quot;, &quot;--watch&quot;, &quot;--destination&quot;, &quot;/srv/jekyll/staging&quot;, &quot;--source&quot;, &quot;/srv/jekyll/source&quot;] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;設定ファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;は共通のものと、表示確認用のもので分離しています。これはMinifierは実行にそれなりに時間がかかるプラグインを外したり、デバッグ用にURLを切り替えるなどしています。 ちなみにMinifierを有効化した際、本サイトのデータを手元のMacBook Pro (Late 2016、Core i7)で実行してMinifierがない場合と比べ1分程度の追加時間が必要となります。&lt;/p&gt; &lt;h1 id=&quot;タグの有効化&quot;&gt;タグの有効化&lt;/h1&gt; &lt;p&gt;jekyll-taggingプラグインを利用します。プラグインの設定とjekyll-taggingへの設定は下記のようなイメージです。ハマりどころとして、jekyll-taggingは &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll/tagging&lt;/code&gt;とスラッシュで区切ります。他のプラグインはだいたい&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt;のようにハイフン区切りなのでそれに倣ってしまいがちです。。&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-paginate&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-sitemap&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll/tagging&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag_page_layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tagpage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag_page_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag_permalink_style&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pretty&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;あとは&lt;a href=&quot;https://github.com/pattex/jekyll-tagging&quot;&gt;jekyll-tagging&lt;/a&gt;の説明にあるように&lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins/ext.rb&lt;/code&gt;へプラグイン指定追加、&lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/tag_page.html&lt;/code&gt;を作成して完成です。&lt;/p&gt; </content> </entry> <entry> <title>Dropbox API: チーム全体のフォルダ・ファイル一覧を取得する</title> <link href="https://watermint.org/2018/05/14/dropbox-api-whole-team-file-list/"/> <updated>2018-05-14T00:00:00-05:00</updated> <id>https://watermint.org/2018/05/14/dropbox-api-whole-team-file-list</id> <content type="html">&lt;p&gt;Dropbox BusinessではAPIを通じてチーム内のユーザーについてファイル・フォルダ一覧を取得したり、更新することができます。これは、マルウェア対策システムがファイルを検査・隔離するために利用したり、ワークフローや生産性向上ツールが自動的にファイルを仕分けするといった用途を想定していると考えられます。なお便利な一方、非常に強力な権限となるため取り扱い上の注意は管理者パスワードなどと同様厳重に管理する必要があることは言うまでもありません。&lt;/p&gt; &lt;p&gt;このようにチーム全体のファイルを扱う場合には&lt;a href=&quot;/2017/12/08/dropbox-api-overview/#business-endpoints&quot;&gt;Dropbox APIの概要のBusiness Endpoints&lt;/a&gt;でご紹介したTeam member file access権限を用います。この権限を使うアプリケーションを作成する手順などは&lt;a href=&quot;/2017/12/08/dropbox-api-overview/#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%99%BB%E9%8C%B2&quot;&gt;該当記事&lt;/a&gt;をご参照ください。&lt;/p&gt; &lt;p&gt;チームメンバーのファイルやフォルダを操作するには大きく分けて二種類の方法があります。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;チームメンバーの代理として実行&lt;/li&gt; &lt;li&gt;管理者として実行&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;チームメンバーの代理として実行する方法では、指定したユーザーが所有しているファイルやフォルダ、参加している共有フォルダ・チームフォルダなどへアクセスすることができます。 管理者として実行する場合にはチーム内すべてのファイル・フォルダへアクセスすることができます。&lt;/p&gt; &lt;p&gt;使い分けとして、たとえばワークフローアプリケーションなどで承認されたドキュメントを所定フォルダに移動するといった用途であれば、承認者の権限で承認者が所有フォルダに移動するといった場合には代理での実行が適切でしょう。マルウェアのスキャンや監査といったチーム全体を対象としたい場合には管理者としての実行が適切でしょう。&lt;/p&gt; &lt;h1 id=&quot;チームメンバーの代理として実行&quot;&gt;チームメンバーの代理として実行&lt;/h1&gt; &lt;p&gt;チームメンバーの代理として実行する場合にはまず&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/teams#team-members-list&quot;&gt;teams/members/list&lt;/a&gt;でアカウント一覧を取得します。User Endpointに対してAPIコールする際にHTTPヘッダ&lt;code class=&quot;highlighter-rouge&quot;&gt;Dropbox-API-Select-User: チームメンバーID&lt;/code&gt;を追加すると、その該当アカウントとして処理が行われます。&lt;/p&gt; &lt;p&gt;たとえば&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder&quot;&gt;files/list_folder&lt;/a&gt;を代理として実行する場合には次のように呼び出します。&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST https://api.dropboxapi.com/2/files/list_folder &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Authorization: Bearer 認証トークン'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Dropbox-Api-Select-User: チームメンバーID'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;path&quot;:&quot;&quot;}'&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h1 id=&quot;チーム管理者として実行&quot;&gt;チーム管理者として実行&lt;/h1&gt; &lt;p&gt;チーム管理者として実行する場合には&lt;code class=&quot;highlighter-rouge&quot;&gt;Dropbox-API-Select-User&lt;/code&gt;ヘッダの代わりに&lt;code class=&quot;highlighter-rouge&quot;&gt;Dropbox-API-Select-Admin&lt;/code&gt;ヘッダを用います。また、チームメンバーIDにはチーム管理者のメンバーIDを指定します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dropbox-API-Select-Admin&lt;/code&gt;ヘッダを用いた場合、チーム内のネームスペースすべてにアクセス可能となりますがAPIによって二つのモードがあり可視範囲が変わります。&lt;/p&gt; &lt;p&gt;一つ目はWhole Teamと呼ばれるモードです。主に参照系APIが該当します。該当APIはAPIドキュメントにてAUTHENTICATIONに&lt;code class=&quot;highlighter-rouge&quot;&gt;Dropbox-API-Select-Admin (Whole Team)&lt;/code&gt;と記載されています。Whole Teamモードではメンバーのプライベートファイルを含むすべてのファイルにアクセスすることができます。&lt;/p&gt; &lt;p&gt;もう一つはTeam Adminと呼ばれるモードです。主に更新系APIが該当します。該当APIはAPIドキュメントにてAUTHENTICATIONに&lt;code class=&quot;highlighter-rouge&quot;&gt;Dropbox-API-Select-Admin (Team Admin)&lt;/code&gt;と記載されています。Team Adminモードではメンバーのプライベートファイルにはアクセスできません。&lt;/p&gt; &lt;p&gt;チーム管理者として実行する際の流れは大まかに次のようになると思います。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;実行するチーム管理者のメンバーIDを取得&lt;/li&gt; &lt;li&gt;チームフォルダ一覧やネームスペース一覧を取得&lt;/li&gt; &lt;li&gt;各ネームスペースについて処理&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;まずチームメンバーの代理として実行する場合と同様に&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/teams#team-members-list&quot;&gt;teams/members/list&lt;/a&gt;でアカウント一覧を取得しチーム管理者のメンバーIDを取得します。アプリケーション用に専用のアカウントが用意できるようであればアプリケーションにあらかじめメンバーIDを設定しておくといった運用も可能でしょう。&lt;/p&gt; &lt;p&gt;次にチームフォルダ一覧やネームスペース一覧を取得します。チームフォルダ一覧は&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/teams#team-team_folder-list&quot;&gt;team/team_folder/list&lt;/a&gt;、ネームスペース一覧は&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/teams#team-namespaces-list&quot;&gt;team/namespaces/list&lt;/a&gt;で取得できます。ワークフロー処理などチームフォルダ内で処理が完結する場合は&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/teams#team-team_folder-list&quot;&gt;team/team_folder/list&lt;/a&gt;、チーム全体のファイルを監査するといった処理の場合はネームスペース一覧から処理を始めるとよいでしょう。&lt;/p&gt; &lt;p&gt;処理したいチームフォルダやネームスペースのネームスペースIDを取得します。なお、チームフォルダIDはそのままネームスペースIDとして利用できます。たとえば、&lt;a href=&quot;https://www.dropbox.com/developers/documentation/http/teams#team-team_folder-list&quot;&gt;team/team_folder/list&lt;/a&gt;のレスポンスが次のような場合、ネームスペースIDは123456789となります。&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;team_folders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;team_folder_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;123456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Marketing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;.tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;active&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;is_team_shared_dropbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cursor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;has_more&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h1 id=&quot;ネームスペースを使ってファイル一覧を取得する&quot;&gt;ネームスペースを使ってファイル一覧を取得する&lt;/h1&gt; &lt;p&gt;パスとネームスペースの扱いについては以前の記事&lt;a href=&quot;/2018/01/22/dropbox-api-path/&quot;&gt;Dropbox API: ネームスペースとパスの表現&lt;/a&gt;にてご紹介いたしました。こちらでご紹介したとおり、&lt;code class=&quot;highlighter-rouge&quot;&gt;ns:ネームスペースID/パス&lt;/code&gt;といった形式でパス指定すれば通常のファイル一覧取得と同じようにファイル一覧を取得することができます。&lt;/p&gt; &lt;p&gt;たとえばチームフォルダ(ネームスペースID = &lt;code class=&quot;highlighter-rouge&quot;&gt;123456789&lt;/code&gt;)のトップフォルダからファイル一覧を取得するには次のように実行します。&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST https://api.dropboxapi.com/2/files/list_folder &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Authorization: Bearer 認証トークン'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Dropbox-Api-Select-Admin: チーム管理者のメンバーID'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;path&quot;:&quot;ns:123456789&quot;}'&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; </content> </entry> <entry> <title>mruby and go: value mapping library</title> <link href="https://watermint.org/2018/04/25/mruby-and-go/"/> <updated>2018-04-25T00:00:00-05:00</updated> <id>https://watermint.org/2018/04/25/mruby-and-go</id> <content type="html">&lt;p&gt;I’m recently working on my hobby project that requires DSL on Go language. From my little research of DSL on Go; &lt;a href=&quot;https://github.com/mitchellh/go-mruby/&quot;&gt;go-mruby&lt;/a&gt; looks attractive to implement DSL. &lt;a href=&quot;https://github.com/mruby/mruby&quot;&gt;mruby&lt;/a&gt; is the lightweight version of Ruby. That is embeddable into an app. With go language, an app can be compilable into a single binary.&lt;/p&gt; &lt;h1 id=&quot;go-mruby&quot;&gt;go-mruby&lt;/h1&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go-mruby&lt;/code&gt; have set of functions that enable essential integration with mruby code and Go. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;go-mruby&lt;/code&gt; can define mruby class or method from Go. But current functions are it’s too primitive for dealing with real-world applications.&lt;/p&gt; &lt;p&gt;Like mapping values from mruby to Go, or vice versa. It’s a bit tiresome for getting/putting each struct field. For example below, just for two fields of struct require 9 lines of code.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewMrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Planet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;` class Planet attr_accessor :id attr_accessor :name end p = Planet.new p.id = 3 p.name = &quot;Earth&quot; p `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fixnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Planet: %v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;For more productivity, I wrote mapping functions. Functions are open sourced on GitHub in MIT license. &lt;a href=&quot;https://github.com/watermint/grb&quot;&gt;grb&lt;/a&gt;.&lt;/p&gt; &lt;h1 id=&quot;grb&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grb&lt;/code&gt;&lt;/h1&gt; &lt;h2 id=&quot;unmarshal-ruby-values-into-go-struct-data&quot;&gt;Unmarshal Ruby values into Go struct data&lt;/h2&gt; &lt;p&gt;Func &lt;code class=&quot;highlighter-rouge&quot;&gt;Unmarshal&lt;/code&gt; fetch values for every field in Ruby object that defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;mruby:&quot;METHOD_NAME&quot;&lt;/code&gt; tag.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Planet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`mruby:&quot;id&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`mruby:&quot;name&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Radius&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`mruby:&quot;radius&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HasMoon&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`mruby:&quot;has_moon&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Moon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`mruby:&quot;moon&quot;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoonRadius&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`mruby:&quot;moon_radius&quot;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Define each value accessor in Ruby class.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Planet&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:radius&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:has_moon&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:moon&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:moon_radius&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Retrieve ruby value &lt;code class=&quot;highlighter-rouge&quot;&gt;*ruby.MrbValue&lt;/code&gt;, then unmarshal it into the Go struct.&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;` p = Planet.new p.id = 3 p.name = &quot;Earth&quot; p.radius = 6371.0 p.has_moon = true p.moon = [&quot;Moon&quot;] p.moon_radius = {&quot;Moon&quot; =&amp;gt; 1737} p `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unmarshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Planet: %v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Planet: {3 Earth 6371 true [Moon] map[Moon:1737]}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;decodeencode-between-ruby-values-and-go-values&quot;&gt;Decode/encode between Ruby values and Go values&lt;/h2&gt; &lt;p&gt;Similar to func &lt;code class=&quot;highlighter-rouge&quot;&gt;Unmarshal&lt;/code&gt;. Func &lt;code class=&quot;highlighter-rouge&quot;&gt;DecodeMrbValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EncodeMrbValue&lt;/code&gt; enable mapping values between mruby and Go. &lt;code class=&quot;highlighter-rouge&quot;&gt;DecodeMrbValue&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;EncodeMrbValue&lt;/code&gt; have limitation for a type of value. This supports JSON equivalent types like below.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;nil&lt;/li&gt; &lt;li&gt;bool&lt;/li&gt; &lt;li&gt;int&lt;/li&gt; &lt;li&gt;float&lt;/li&gt; &lt;li&gt;string&lt;/li&gt; &lt;li&gt;Array / slice&lt;/li&gt; &lt;li&gt;Hash / map (Hash/map key must be a string)&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewMrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Mapping to mruby value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EncodeMrbValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Earth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Moon&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1737&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Mapping from mruby value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecodeMrbValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; </content> </entry> <entry> <title>GolangでBOM付きCSVファイルを読み込む</title> <link href="https://watermint.org/2018/03/27/golang-csvfile-with-bom/"/> <updated>2018-03-27T00:00:00-05:00</updated> <id>https://watermint.org/2018/03/27/golang-csvfile-with-bom</id> <content type="html">&lt;p&gt;先行事例・解決策は山ほどあるかと思いますが、はまったのでメモがてら解決方法を。BOM付きUTF16などでエンコードされたテキストを扱うに当たって、ライブラリなどが対応してくれているといいのですが、GolangのCSVReaderは対応していないようです。このため、次のような関数を準備してエンコーディングを変換してやります。&lt;/p&gt; &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewBomAwareCsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomUtf8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0xef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomUtf16BE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0xfe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomUtf16LE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xfe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// decoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomUtf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Discard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bomUtf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomUtf16BE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigEndian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseBOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomUtf16LE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LittleEndian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseBOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;あとはファイルを読み込めば変換できます。ひとまず必要が無かったので対応しませんでしたが、&lt;a href=&quot;https://godoc.org/golang.org/x/text/encoding/unicode/utf32&quot;&gt;utf32パッケージ&lt;/a&gt;を使って同様処理を追加してやればUTF32も対応できます。&lt;/p&gt; </content> </entry> </feed>